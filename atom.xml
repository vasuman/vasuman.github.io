<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aleph_null</title>
  <subtitle>Nothing to see here</subtitle>
  <link href="http://www.varav.in/" rel="alternate"/>
  <link href="http://www.varav.in/atom.xml" rel="self"/>
  <id>http://www.varav.in/</id>
  <updated>2015-04-18T11:54:58.989000Z</updated>
  <author>
    <name>Vasuman Ravichandran</name>
    <email>vasumanar@gmail.com</email>
  </author>
  
  <entry>
    <id>http://www.varav.in/posts/2014/12/11/lsystem.html</id>
    <title>L-systems</title>
    <link href="http://www.varav.in/posts/2014/12/11/lsystem.html" rel="alternate"/>
    <updated>2014-12-11T00:00:00Z</updated>
    <content type="html">
      &lt;h2&gt;Charnia&lt;/h2&gt;
&lt;p&gt;I was watching the &lt;a href=&#34;http://firstlifeseries.com/&#34;&gt;First Life&lt;/a&gt; documentary which
chronicles the origins and evolution of life. In the documentary, they make a
mention of &lt;a href=&#34;http://en.wikipedia.org/wiki/Charnia&#34;&gt;Charnia&lt;/a&gt; a frond-like
primitive organism. It lived deep underwater and fed of nutrients in the water.
Sadly, it went extinct and has no extant descendants. Since it is one of the
oldest known multicellular organisms it provides great insights into the origins
of such beings.&lt;/p&gt;
&lt;p&gt;This is what they supposedly looked like,&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/static/images/lsystem/charnia.jpg&#34; /&gt;&lt;figcaption&gt;Charnia&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now, you may be wondering why I&#39;m talking about something that hasn&#39;t been
around for over 500 million years. Well, I was struck by the beauty and
simplicity of the organization of it&#39;s cells. These organisms adopted fractal
branching to generate their body structure.&lt;/p&gt;
&lt;p&gt;Since this organism had to absorb its sustenance from the ocean, it needed a
very high surface area and compact packing. Fractal arrangements were perfect
for this. It&#39;s truly amazing how resourceful these organisms were to use
relatively simple instructions can give rise to amazingly beautiful patterns.
They necessarily couldn&#39;t be too elaborate in their designs.&lt;/p&gt;
&lt;h2&gt;Lindenmayer systems&lt;/h2&gt;
&lt;p&gt;Digging deeper into this topic is where I found
&lt;a href=&#34;https://en.wikipedia.org/wiki/L-system&#34;&gt;Lindenmayer Systems&lt;/a&gt; or L-systems for
short. Developed by Astrid Lindenmayer, a Hungarian biologist in 1968, they
provide a clear and simple way to model fractal growth.&lt;/p&gt;
&lt;p&gt;An L-system is basically a type of formal grammar, in other words, it defines a
language -- basically a set of acceptable strings. It has three basic
components,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set of alphabets used to compose the strings&lt;/li&gt;
&lt;li&gt;An axiom (&lt;em&gt;starting string&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Rewrite rules&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The set of strings belonging to this language is generated by first starting out
with a set containing the axiom. Then we generate new strings by applying all
applicable rewrite rules to the strings in the set.&lt;/p&gt;
&lt;p&gt;Rewrite rules or production rules as you may have heard of them consist of a
&lt;em&gt;left-hand&lt;/em&gt; side and a &lt;em&gt;right-hand&lt;/em&gt; side. Any substring matching the left side
can be substituted with the string on the right side. As with any formal
grammar, an L-system is context-free if there is only a single symbol in the
left hand side of the production.&lt;/p&gt;
&lt;p&gt;L-system models are greatly suited to generate self-similar or &lt;em&gt;fractal&lt;/em&gt;
patterns because the rewrite rules can be recursively expanded.&lt;/p&gt;
&lt;h2&gt;Logo&lt;/h2&gt;
&lt;p&gt;I remember back in school when we were first introduced to computers and
programming, we were taught the
&lt;a href=&#34;http://el.media.mit.edu/logo-foundation/logo/programming.html&#34;&gt;Logo Programming Language&lt;/a&gt;.
I thought this was just one of those things you were taught in school and never
had to use later. Well, turns out I was wrong, the little turtle wasn&#39;t dead
yet. Most L-systems use a Logo-like paradigm to implement graphics.&lt;/p&gt;
&lt;p&gt;In a relatively simple model, the turtle&#39;s state encapsulates of four
parameters,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; co-ordinate.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; co-ordinate.&lt;/li&gt;
&lt;li&gt;Angle of orientation&lt;/li&gt;
&lt;li&gt;Color of line drawn.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Stateful drawing commands help us generate graphics for every derived string.
Each symbol is associated with a Logo command and every string is interpreted as
a sequence of commands that is executed by the interpreter to generate the final
pattern.&lt;/p&gt;
&lt;h2&gt;Mechanism&lt;/h2&gt;
&lt;p&gt;Consider, a relatively simple grammar.&lt;/p&gt;
&lt;p&gt;The set of symbols is, &lt;code&gt;{A, B, C, R}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Production rules are,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, I must mention here that for any symbol (&lt;code&gt;X&lt;/code&gt;) lacking any rewrite rule, we
assume an identity expansion, i.e.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The axiom is &lt;code&gt;R A&lt;/code&gt;. The &lt;code&gt;R&lt;/code&gt; symbol is just used to get the orientation correct.&lt;/p&gt;
&lt;p&gt;Consider these draw rules for the symbols,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;A = FD 10
B = RT 60
C = LT 120
R = RT 90
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Initially, the string representing the state of the system is,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;R A
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Substituting the symbols&#39; logo equivalents we get the sequence,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;RT 90
FD 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The graphical representation of the system looks like,&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/static/images/lsystem/lsys-init.jpg&#34; /&gt;&lt;figcaption&gt;Initial state&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;On iterating once, we apply the production to expand all the symbols we can. Our
string becomes,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;R A B A C A B A
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Logo sequence equivalent,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;RT 90
FD 10
RT 60
FD 10
LT 120
FD 10
RT 60
FD 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Evaluating these commands in an interpreter, we get the graphical
representation,&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/static/images/lsystem/lsys-1.jpg&#34; /&gt;&lt;figcaption&gt;First iteration&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Iterating again, we continue to expand and our string becomes,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;R A B A C B A B A B A C B A C A B A C B A B A B A C B A
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, that&#39;s big. As you may have probably guessed, the string size grows
exponentially.&lt;/p&gt;
&lt;p&gt;It looks like,&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/static/images/lsystem/lsys-2.jpg&#34; /&gt;&lt;figcaption&gt;Second iteration&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you look at what this system is actually doing in simple terms, it&#39;s simply
replacing every straight line in the figure with a small triangular bump. This
substitution is recursively applied to any lines in the resulting figure to give
rise to self-similarity.&lt;/p&gt;
&lt;p&gt;Another iteration and we get something looking like this,&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/static/images/lsystem/lsys-3.jpg&#34; /&gt;&lt;figcaption&gt;Third iteration&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Pretty cool, right!&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&#34;/demos/lsystem.html&#34;&gt;demo&lt;/a&gt; that I wrote up. It has got a few cool
presets. The &lt;a href=&#34;https://github.com/vasuman/lsystem&#34;&gt;sauce&lt;/a&gt; is available.&lt;/p&gt;
&lt;h2&gt;Patterns&lt;/h2&gt;
&lt;p&gt;Here&#39;s a few cool patterns that I&#39;ve generated.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/static/images/lsystem/fern-knife.png&#34; /&gt;&lt;figcaption&gt;Fern Knife&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&#34;/static/images/lsystem/crosses.png&#34; /&gt;&lt;figcaption&gt;Crosses&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&#34;/static/images/lsystem/stars.jpg&#34; /&gt;&lt;figcaption&gt;Stars&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Try making your own.&lt;/p&gt;
    </content>
    <!-- TODO: <summary> -->
  </entry>
  
  <entry>
    <id>http://www.varav.in/posts/2014/10/6/named-pipes.html</id>
    <title>Fun with pipes</title>
    <link href="http://www.varav.in/posts/2014/10/6/named-pipes.html" rel="alternate"/>
    <updated>2014-10-06T00:00:00Z</updated>
    <content type="html">
      &lt;p&gt;Quite a while back I came across some interesting applications of
&lt;strong&gt;named pipes&lt;/strong&gt; that I thought I should share with everybody.&lt;/p&gt;
&lt;p&gt;First, some background.&lt;/p&gt;
&lt;h2&gt;Pipes&lt;/h2&gt;
&lt;p&gt;Commonly, pipes are used in the shell to redirect the &lt;code&gt;stdout&lt;/code&gt; of one
process to the &lt;code&gt;stdin&lt;/code&gt; of another, you simply&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;cat myfile &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep sometext
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Named pipes&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;|&lt;/code&gt; pipes are anonymous, they cannot be referenced externally.
Named pipes on the other hand have an accesible path in the
filesystem.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;mkfifo /tmp/mypipe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These pipes allow us to setup flows across different shell commands.
Data can be pumped in by one command and fed to another command. Like,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;cat /tmp/mypipe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command blocks till the named pipe spews and &lt;code&gt;EOF&lt;/code&gt; marker.&lt;/p&gt;
&lt;p&gt;And in another shell,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;cat &amp;gt; /tmp/mypipe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, whatever you type in the this shell should be visible in the
other shell. Press &lt;kbd&gt;Ctrl-D&lt;/kbd&gt; to exit.&lt;/p&gt;
&lt;p&gt;Named pipes are primarily used as IPC mechanisms along with UNIX
sockets.&lt;/p&gt;
&lt;p&gt;Now let&#39;s get down to some interesting stuff. These pipes are
of interest to me because they allow us to set up a very special kind
of circular reference. That is, &lt;em&gt;they allow a command&#39;s own output to
be part of it&#39;s input!&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Echo Server&lt;/h2&gt;
&lt;p&gt;Let&#39;s start of with something simple, an &lt;strong&gt;echo server&lt;/strong&gt;. The
principle is to simply &lt;em&gt;echo&lt;/em&gt; the input of the user. As have probably
noticed, this falls directly into the category of problems the
circular reference property of named pipes solves -- the input is the
output.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://sectools.org/tool/netcat/&#34;&gt;netcat&lt;/a&gt; utility helps us setup
a simple listening socket that can be communicated with using &lt;code&gt;stdin&lt;/code&gt;
and &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;cat /tmp/mypipe &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; nc -l &lt;span class=&#34;m&#34;&gt;59000&lt;/span&gt; &amp;gt; /tmp/mypipe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simply &lt;code&gt;cat&lt;/code&gt;ing the contents of a pipe to the input of the &lt;code&gt;nc&lt;/code&gt;
command with the &lt;code&gt;-l&lt;/code&gt; option that sets up a port to listen on and
write any incoming data to the same pipe so that it&#39;s echoed
back. Then,&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;nc &amp;lt;network-address&amp;gt; 59000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There you have it, an &lt;em&gt;echo server in one line of bash&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Remote Shell&lt;/h2&gt;
&lt;p&gt;Suppose, you have discovered a vulnerability in some service that
allows you to execute a single command on the shell. Now you want to
drop a shell on that box. For something serious, you&#39;re probably
better of using
&lt;a href=&#34;http://www.offensive-security.com/metasploit-unleashed/Meterpreter_Basics&#34;&gt;Meterpreter&lt;/a&gt;
but this is for cases where you just need a simple, quick and dirty
hack!&lt;/p&gt;
&lt;p&gt;Like the earlier snippet we set up a circular input path. The only
difference being we pipe the user input through the bash interpreter
that executes &lt;code&gt;stdin&lt;/code&gt; and pipe it&#39;s &lt;code&gt;stdout&lt;/code&gt; back to the network socket.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;cat /tmp/mypipe &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; bash &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; nc -l &lt;span class=&#34;m&#34;&gt;59000&lt;/span&gt; &amp;gt; /tmp/mypipe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just connect to that port and you should have a working remote shell.&lt;/p&gt;
&lt;h2&gt;Chat Server&lt;/h2&gt;
&lt;p&gt;A chat server is another application that falls into the same problem
domain. It recieves some input and simply relays that input to all
connected users. It can be thought of as an echo server with multiple
concurrent nodes.&lt;/p&gt;
&lt;p&gt;Sadly though, the netcat utility only allows only a single active
connection. Luckily, there&#39;s &lt;a href=&#34;http://nmap.org/ncat/&#34;&gt;this&lt;/a&gt; rewrite of
the netcat tool that allows us to accept multiple incoming connections
simultaneously.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;cat /tmp/mypipe &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ncat -l -k &lt;span class=&#34;m&#34;&gt;59000&lt;/span&gt; &amp;gt; /tmp/mypipe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now multiple hosts can connect to that port and exchange messages with
each other.&lt;/p&gt;
    </content>
    <!-- TODO: <summary> -->
  </entry>
  
</feed>