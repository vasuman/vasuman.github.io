<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Vasuman]]></title><description><![CDATA[Personal website and blog of Vasuman Ravichandran]]></description><link>https://www.varav.in</link><generator>metalsmith-feed</generator><lastBuildDate>Mon, 27 Jan 2020 16:05:25 GMT</lastBuildDate><atom:link href="https://www.varav.in/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Transcendence Through Negation]]></title><description><![CDATA[<p>Philo Judaeus was a Jewish philosopher from Alexandria, who lived
contemporaneous with the Christ. While Jesus walked around extolling the
positive attributes of a unitary God: compassionate, merciful, loving, kind.
Philo preferred a different approach to describing the absolute — by negating
characterizations.</p>
<p>In Philo’s allegorical exegesis on the Old Testament in Greek, he spurned the
anthropomorphization of God. His view on human-like descriptions of God in
scripture was that they were not to be taken literally, but instead considered
metaphors. Since humans, “frame our conceptions of the uncreated from our own
experience” (<a href="https://ryanfb.github.io/loebolus-data/L261.pdf#page=76">De Confusione
Linguarum</a>).</p>
<p>Rather than endorse the common maxim that God created man in His image, Philo
propounded that man created God in his image. Philo believed that the true
nature of the Absolute lay beyond the realm of our rather anthropocentric
cognizance and could only be hinted at by negating all designations. Quoting
from his work, <a href="https://ryanfb.github.io/loebolus-data/L275.pdf#page=162">De Mutatione
Nominum</a>.</p>
<blockquote>
<p>Think it not then a hard saying that the highest of all things should be
unnamable when His word has no name of its own which we can speak. And indeed
if He is unnamable, He is also inconceivable and incomprehensible.</p>
</blockquote>
<p>The antecedents of his position lie in the Jewish notion of the ineffability of
the Absolute. The Absolute represents a divine perfection that couldn’t be
sullied with words. With some orthodox sects even going so far as prohibiting
the utterance of the name (יהוה), preferring the use of a substitute instead.</p>
<p>The Early Church Fathers, who were responsible for establishing the intellectual
foundations of later Christianity were heavily influenced by Philo’s approach.
Perhaps best evidenced by Saint Augustine’s famous saying, “if you understand
something, it is not God”.</p>
<blockquote>
<p>Si comprehendis, non est deus.</p>
</blockquote>
<p>So, how does one goes about describing that which is indescribable? Well, by
stating “what it is not” (<em>apophasis</em>).</p>
<p>There is, however, an important nuance in the application of negation here. As
the Christian mystic Pseudo-Dionysius notes in his work <a href="http://www.esoteric.msu.edu/VolumeII/MysticalTheology.html">Mystical
Theology</a>, by
negating an attribute, we don’t affirm the opposite. By saying that something
“not alive”, we aren’t implying that it’s dead. Instead, we mean that it is in
some sense beyond the characterization — transcending the attribute.</p>
<p>Vedantic meditation on the nature of the Atman also preaches of a similar
negationary tactic of “not this, not this” (नेति नेति). The Atman refers to one’s
true self, which is the witness of all experiences. In order to identify the
true nature of the “self”, one must be able to distinguish it from the
“non-self”. The non-self is described as anything that is observed. Since, if
something is observable, then it axiomatically cannot be the observer.</p>
<p>This yields a rather surprising result when applied to the objects of one’s own
cognition. Thoughts, feelings, emotions that are traditionally considered to be
an integral part of one’s identity, are no longer identified with the Atman.
Since all these things are observed, they cannot be a constituent part of the
observer. They are then viewed as the impersonal, transient phenomena they truly
are.</p>
<p>Advaita Vedanta holds that the nature of the Atman is beyond conception, because
all concepts are reflected within it. It also goes on to negate the the idea of
a self distinct from the rest of the universe and the apparent duality between
the perceiver and perceived, equating the Atman with the divine absolute —
Brahman. Leading to the statement, “I am the Absolute”.</p>
<blockquote>
<p>अहम् ब्रह्मास्मि</p>
</blockquote>
<p>The negation of all duality is supposed to lead to a wholly non-dual state,
where all distinctions are dissolved and there is an experience of perfect
unity. As described in a verse from Dattatreya’s <a href="https://en.wikisource.org/wiki/Translation:Avadhuta_Gita/Chapter_1#verse62">Avadhuta
Gita</a>.</p>
<blockquote>
<p>साकारं च निराकारं नेति नेतीति सर्वदा ।<br/>
भेदाभेदविनिर्मुक्तो वर्तते केवलः शिवः ।।</p>
<p>Always “not this, not this” to both the formless and the formed. Only the
Absolute exists, transcending difference and non-difference.</p>
</blockquote>
<p>In Buddhism too, the central soteriological concept of transcendent Nirvana is
described in similar apophatic terms: as the unconditioned state, extinction of
craving, freedom from desire and cessation. The word Nirvana literally
translates to “blowing out”, akin to a flame being extinguished.</p>
<p>There is, however, a subtle difference in this position. It refrains from all
positivist descriptions of Nirvana, and doesn’t attempt to establish Nirvana as
a metaphysical absolute. By objectifying and exalting the inconceivable, our
mind treats it as another idea to grasp on to. But the unconditioned state is
only attained through liberation from all grasping. Buddhist monk Walpola Rahula
elaborates in his book, <a href="https://web.ics.purdue.edu/~buddhism/docs/Bhante_Walpola_Rahula-What_the_Buddha_Taught.pdf#page=58">What the Buddha
Taught</a>.</p>
<blockquote>
<p>Language is considered deceptive and misleading in the matter of understanding
of the Truth. […] Nevertheless we cannot do without language. But if Nirvana
is to be expressed and explained in positive terms, we are likely immediately
to grasp an idea associated with those terms, which may be quite the contrary.
Therefore it is generally expressed in negative terms — a less dangerous
mode perhaps.</p>
</blockquote>
<p>Perhaps this is why the Buddha was silent on the question about the existence of
an Absolute. He knew that affirming its existence naturally leads to a
conceptualization and subsequent clinging, which hinders progress towards
experiencing the unconditioned state directly — a state free of all clinging.</p>
<p>He was, however, unequivocal about the existence of transcendence in <a href="https://suttacentral.net/ud8.3/en/anandajoti">his
discourses</a>. If there is nothing
beyond what we ordinarily perceive in this conditioned world, there would be no
possibility of escape from mundane existence, and no point in any dharmic
pursuit.</p>
<p>In a manner of speaking, Buddhism preaches of a purely apophatic approach to
transcendence. I like to use the term apotheism, to refer to this view. It
derives from the Sanskrit (अपोहाते) or Greek (<em>apophasis</em>) roots, both of which
mean “to deny”.</p>
<p>While both make use of negation, the apophatic approach to transcendence differs
significantly from an atheistic denial. Where the modern-day atheist epitomizes
rationality and reason as the only true means of knowledge and dismisses
anything that isn’t backed by material evidence, the apotheist hints at a state
that is beyond the reach of reason, using means that are replete with apparent
contradictions and inconsistencies.</p>
<p>This view also differs from the various forms of theism that attempt to assert
the existence of a God as a fundamental truth, often portraying this God as a
creator, source of all goodness or an arbiter of morality. While apotheism
acknowledges the possibility of transcendence, it refuses to characterize the
transcendence with any labels and only seeks to negate the any ideas that we
intuitively associate with it. It is a transcendence known only through a direct
personal experience that is beyond the desire to articulate or rationalize.</p>
]]></description><link>posts/2020/01/20/apotheism.html</link><guid isPermaLink="false">https://www.varav.in/posts/apotheism.md</guid><pubDate>Mon, 20 Jan 2020 08:00:00 GMT</pubDate></item><item><title><![CDATA[Observing Things As They Are]]></title><description><![CDATA[<p>I recently completed a 10-day
Vipassana <a href="http://dhamma.org/">retreat</a>, which was a pretty
enlightening experience. I’d highly recommend it to anyone seeking
to reduce their suffering. I learned a lot, but my key takeaway
from the entire exercise is that our suffering arises from not
accepting the reality of things as they are.</p>
<p>Our minds are constantly engaged in constructing a fictional ideal
world conditioned by our desires while heedlessly ignoring the
true nature of things. This breeds nothing but misery.</p>
<p>The Sanskrit word <em>yathābhūtaṃ</em> is a compounding of the words for
“in whatever manner” (<em>yathā</em>) and “reality” (<em>bhūta</em>), which
approximately translates to “reality however it is”. It features
in <a href="https://suttacentral.net/sn22.126/en/sujato">several</a> <a href="https://suttacentral.net/sn35.160/en/sujato">discourses</a> in
the Pali Canon, and is referenced in the context of developing the
right understanding (<em>sammādiṭṭhi</em>) of the nature of things by
objectively observing reality as it manifests.</p>
<h2 id="reality-is-now">Reality is Now</h2>
<p>True objectivity is only possible in the present moment. Our
recollections of the past are littered
with <a href="http://www.aboutintelligence.co.uk/memory-biases.html">biases</a>.
Predictions of the future are probabilistic and tinged by our
expectations.</p>
<p>Objectively observing reality keeps one grounded in the present
moment and makes it easier to detect distracting thoughts. If a
thought doesn’t relate to the phenomenal experience of the present
moment, it doesn’t reflect the true nature of things. This is also
a key aspect of the whole mindfulness movement — being aware of
the present moment.</p>
<h2 id="breathing-naturally">Breathing Naturally</h2>
<p>Before attending the retreat, my self-taught meditation practice
involved actively controlling the flow of breath. However, early
on in the instruction, we were discouraged from trying to control
the breath and asked to just observe its natural flow. It didn’t
matter whether it was fast, slow, shallow or deep — you were
simply meant to observe it as it was.</p>
<p>Initially, after changing my technique, I found myself more easily
distracted. I realized that the sense of agency I had in
consciously breathing helped keep my mind occupied. Sustaining
bare attention with no volitional impulse was a lot more
challenging. It felt like I was trying to meditate on hard mode.</p>
<p>However, as time went by, I slowly started seeing the actual
purpose behind this.</p>
<h2 id="remaining-equanimous">Remaining Equanimous</h2>
<p>Part of the goal is also to help cultivate the virtue of
equanimity (<em>upekkhā</em>). While it is possible to attain a certain
level of tranquility by controlling the breath, the intentionality
behind the act of control also becomes a roadblock to achieving
perfect stillness.</p>
<p>Controlling the breath implies a desired way of breathing. But, to
be truly equanimous, no particular way must be preferable over any
other. One must simply accept the state of things as they are,
with no yearning to change it.</p>
<p>I also noticed that as I became more equanimous, I was less
critical of myself upon noticing distraction. Instead of hating
myself for losing focus, or becoming averse to the object of my
distraction, I would simply acknowledge the reality of the present
moment — that the mind had wandered off — and calmly get back to
focusing on the breath.</p>
<h2 id="seeds-of-suffering">Seeds of Suffering</h2>
<p>The urge to control can also be interpreted as a form of desire
(<em>taṇhā</em>), and Buddhist doctrine considers desire to be the source
of all suffering (<em>dukkha samudaya</em>). Desire can be further broken
down into an attachment (<em>rāga</em>) to pleasurable sensations and
aversion (<em>dveṣa</em>) to unpleasant sensations.</p>
<p>It’s perhaps obvious why unpleasant sensations are a source of
suffering, but what about pleasant sensations? It certainly feels
like pleasure is the very antithesis of suffering. But,
objectively observing the nature of phenomenal experiences will
show you that every pleasurable feeling contains the seeds of
suffering within it.</p>
<h2 id="sensations-are-impermanent">Sensations are Impermanent</h2>
<p>One of the undeniable characteristics of all experiences is their
impermanence (<em>anicca</em>). This means that all pleasurable feelings
will at some point fade away. Relishing in a pleasant feeling
naturally causes an attachment to that feeling. Subsequently
leading to a craving for the same feeling when it eventually
ceases.</p>
<p>It’s this craving for pleasure that manifests as suffering.
Anybody who has personally dealt with any form of addiction can
attest to the magnitude of suffering in craving for a high.</p>
<p>Psychologists term this phenomenon <a href="https://positivepsychology.com/hedonic-treadmill/">hedonic
adaptation</a>.
According to this theory, the mind begins to adapt to a positive
feeling leading an eventual regression to the baseline state.
Which is simply another way of explaining the transient nature of
all pleasurable sensations.</p>
<h2 id="pain-also-passes">Pain Also Passes</h2>
<p>On a more positive note, this impermanence also applies to
unpleasant sensations like pain. Being unaccustomed to maintaining
my posture for extended periods of time, I would regularly move my
arms and legs upon feeling even mild discomfort.</p>
<p>Then, they introduced the “strong determination” (<em>adhiṭṭhāna</em>)
sittings, where you were supposed to maintain your body posture
without any major movement for a whole hour. Instead of reacting
to every minor ache, I decided to observe its impermanence. But,
it seemed like the longer I waited for the pain to pass, the more
it intensified.</p>
<p>Then, I realized that I wasn’t objectively watching the sensation,
I was observing it while covertly wishing that it stopped. The
craving for cessation took on a life of its own and exaggerated
the pain. Keeping my attention impartially focussed on the
sensation without willing it to stop helped me notice that the
pain also eventually faded.</p>
<h2 id="craving-enlightenment">Craving Enlightenment</h2>
<p>Another major lesson for me was that my original motivation for
attending the retreat was also a hindrance to making progress on
the path. I came in hoping to experience some extreme state of
bliss. But as we neared the end and no such feeling arose, I
started getting anxious.</p>
<p>The recorded instructions spoke of subtle sensations all over the
body, but I didn’t feel any such thing. Was I a bad meditator,
doing something wrong or was the technique itself flawed? I
started thinking of ways to generate such sensations — I could
layer up heavily and I should feel the prickle of heat all over my
body.</p>
<p>But then, it was explained that it didn’t matter what you were
feeling — pleasurable pulsation, annoying itch, or nothing at all
— your job was to impersonally observe and accept it. The aim of
the technique is to train your equanimity and awareness by
observing sensations, without craving for particular sensations or
trying to artificially manufacture them.</p>
<p>Attaining enlightenment doesn’t require experiencing some form of
transcendence — although it may naturally occur on the path. The
ultimate goal is to end suffering by relinquishing all forms of
desire, including the desire for enlightenment itself.</p>
]]></description><link>posts/2019/10/30/yathabhutam.html</link><guid isPermaLink="false">https://www.varav.in/posts/yathabhutam.md</guid><pubDate>Wed, 30 Oct 2019 07:00:00 GMT</pubDate></item><item><title><![CDATA[Shunyata]]></title><description><![CDATA[<p>For millennia, philosophers have debated whether essences (<em>svabhāva</em>) are real
entities. In the West, the essentialist doctrine was famously espoused by
Plato’s Theory of Ideas which claimed that real-world objects are imitations of
transcendent Forms.</p>
<p>In his book <a href="http://www.ntslibrary.com/PDF%20Books/History%20of%20Western%20Philosophy.pdf#page=217">The History of Western
Philosophy</a>,
Bertrand Russell criticizes this view, claiming that it conflates a linguistic
convention with metaphysical ontology.</p>
<blockquote>
<p>We apply the same name, on different occasions, to somewhat different
occurrences, which we regard as manifestations of a single “thing” or “person”.
In fact, however, this is only a verbal convenience. […] The question is purely
linguistic: a word may have an essence, but a thing cannot.</p>
</blockquote>
<p>The debate in the Indian subcontinent, however, was not focused on the
substantiveness of physical things, but the true nature of phenomenal
experiences.</p>
<p>It centered around whether the fundamental constituents of experience
(<em>dharma</em>) like consciousness (<em>citta</em>), thoughts (<em>cetasika</em>) and physical
forms (<em>rūpa</em>); were real entities or just useful — but ultimately fictitious —
conceptual constructs.</p>
<hr>
<p>In the essentialist camp, there were the aptronymic Sarvastivadins, an early
Buddhist sect that thrived around the Kashmir valley. They claimed all
elementary dharmas exist (<em>sarvām-asti</em>) substantively (<em>dravya</em>), as opposed
to chariots
and <a href="https://www.utne.com/mind-and-body/ship-of-theseus-identity-ze0z1311zjhar">ships</a> which
only have a nominal existence (<em>prajñapti</em>).</p>
<p>In this context, the term dharmas refer to the irreducible atoms of phenomenal
experience in a discrete moment (<em>kṣaṇa</em>) of awareness. Each dharma possesses a
unique property (<em>svālakṣaṇa</em>) that characterizes it: fire is hot, water is
wet.</p>
<p>Sarvastivadins also held that dharmas were eternal and unchanging,
permanently existing in all periods: past, present, and future. But only
dharmas in the present time had productive effects (<em>kārita</em>).</p>
<p>Opposing this view, was Nagarjuna, a monk from South India who is probably one
of the most important Buddhist philosophers: perhaps more than the Buddha
himself, who was a pragmatist concerned with ending suffering and less prone to
engaging in dialectical reasoning.</p>
<p>Along with his pupil Aryadeva, Nagarjuna founded the centrist Madhyamaka school
which sought to find a middle path between the extremes of essentialism and
nihilism. Their answer was to claim that all dharmas are empty (<em>śūnya</em>) of any
intrinsic nature and also that the apparent emptiness is empty itself.</p>
<hr>
<p>Nagarjuna’s magnum opus <a href="https://www2.hf.uio.no/polyglotta/index.php?page=volume&amp;vid=27">Root Verses on the Middle
Way</a> (<em>mūlamadhyamakakārikā</em>,
or MMK for short) is a collection of apophatic assertions about the nature of
reality in verse form. If you’re looking for a good commentary, I’d highly
recommend <a href="https://www.amazon.com/dp/1614290504">this one</a> by Siderits and
Katsura.</p>
<p>To the uninitiated, the extensive use of <em>reductio ad absurdum</em> dialogue to
deny the ultimate truth of any concept can seem frustrating. But, the aim isn’t
to engage in a
destructive <a href="https://medium.com/@vasuman/lessonson-debates-from-an-ancient-manual-81b437525f0f">debate</a> (<em>vitaṇḍā-vada</em>),
it is to point out that language itself implicitly relies on an unsubstantiated
notion of essence.</p>
<p>Tsongkhapa of the Tibetan Gelug
school <a href="https://www.researchgate.net/publication/236700328_The_Svatantrika-Prasangika_Distinction_What_Difference_Does_a_Difference_Make_review">emphasized</a> this meta distinction
in viewpoints of the interlocutors. By laying out the absurd consequences
(<em>prasaṅgika</em>) of all forms of syllogistic reasoning, they covertly hinted at a
foundational flaw in the opponent’s world view.</p>
<hr>
<p>Nagarjuna was very thorough in his construction of arguments. This is
highlighted by his use of the tetralemma (<em>catuṣkoṭi</em>): a fourfold argument.
For a pair of propositions (A, B), we consider all four possibilities.</p>
<ol>
<li>A and (not B)</li>
<li>(not A) and B</li>
<li>A and B</li>
<li>(not A) and (not B)</li>
</ol>
<p>This structure is employed when discussing the origination of conditioned
dharmas.</p>
<blockquote>
<p>na svato nāpi parato na dvābhyāṃ nāpyahetutaḥ utpannā jātu vidyante bhāvāḥ
kva cana ke cana</p>
<p>No thing anywhere is ever originated from itself, from something else, from
both or without a cause. (MMK 1.1)</p>
</blockquote>
<p>The commentaries elaborate that if the conditions contained the essence of the
effect they produced (<em>satkaryavada</em>), there would be no need for a distinct
act of origination.</p>
<p>If a thing borrows its essence from something else (<em>asatkaryavada</em>), where
does the “other” thing derive its essence from? We end up with an infinite web
of dependency relationships.</p>
<p>The conjunction of these propositions is denied because neither one can be
independently established. And the final case leads to the absurdity of having
no restrictions on how things come to be.</p>
<hr>
<p>Central to Buddhist dogma was the concept of dependent
origination (<em>pratītyasamutpāda</em>): all dharmas arise dependent on other
dharmas. Unlike mental abstractions, real things don’t exist in isolation.</p>
<p>If the existence of a thing depends on something else, it is empty of an
intrinsic essence, because essences are supposed to be independent and
immutable.</p>
<p>This applies not only to entities but also their properties or attributes.
Properties can only be ascribed when a thing is compared to other things.</p>
<blockquote>
<p>yaḥ pratītyasamutpādaḥ śūnyatāṃ tāṃ pracakṣmahe sā prajñaptir upādāya
pratipat saiva madhyamā</p>
<p>Whatever is contingently related, that is explained as emptiness. That is
contingently designated; it is the central path. (MMK 24.18)</p>
</blockquote>
<p>The property of size is one such example. The size of a thing — like a banana —
can only be described in terms of its relation to the size of another object.
Even the standardized units that we conventionally use are just a useful common
reference and subject
to <a href="https://en.wikipedia.org/wiki/History_of_the_metre">change</a>.</p>
<hr>
<p>Seeds of the Madhyamika thesis are also found in the canonical Buddhist concept
of impermanence (<em>aniccā</em>) which is one of the three marks of existence.
Constant change is an undeniable characteristic of reality, but the way we
refer to things only considers a static snapshot of the state of the world.</p>
<p>In
his <a href="http://www.epitropakisg.gr/grigorise/Mayr_GrowthOfBiologicalThought.pdf#page=163">book</a>,
Ernst Mayr discusses the role that essentialist taxonomy played in shackling
pre-Darwinian biological thought. From the time of Aristotle, biologists
believed that all animals had fixed essences based on the species they belonged
to: all people had a human essence.</p>
<p>But, the theory of evolution shows that incremental mutations and changing
environmental selection pressures make successive generations diverge
genetically from their ancestors. So, the definition of what it means to be
“human” is in constant flux.</p>
<hr>
<p>The concept of emptiness can easily be misconstrued and inappropriately applied
to strip anything of meaning: including the precepts of Buddhism. One could
potentially justify immoral and unethical actions, by claiming that all
things — including karmic consequences — were empty. To defend against this,
Nagarjuna employed the famous two truths theory.</p>
<blockquote>
<p>dve satye samupāśritya buddhānāṃ dharmadeśanā lokasaṃvṛtisatyaṃ ca satyaṃ ca
paramārthataḥ</p>
<p>The Dharma taught by Buddhas perfectly relies on two truths: the worldly
conventional truth and the ultimate truth. (MMK 24.10)</p>
</blockquote>
<p>The conventional truth (<em>saṁvṛti-satya</em>) deals with the truths of the world
that we inhabit. Causation, physical laws of the universe and facts about our
lives fall into this category. Emptiness described the ultimate truth
(<em>paramārtha-satya</em>) which was unconditioned and free of any characteristic
attributes.</p>
<p>According to Nagarjuna, practical knowledge was vital to spiritual progress.
And one had to understand the distinction between these truths to truly
comprehend emptiness.</p>
<hr>
<p>Orthodox Hindu philosophers, who sought to establish a metaphysical absolute
(<em>brahman</em>) as the source of all essence, often attacked the Madhyamaka
position as being nihilistic.</p>
<p>In defense, the commentator Chandrakriti claims that they are imposing a
negative spin on the concept of emptiness. The emptiness that the Madhyamikas
describe is not an assertion of non-existence.</p>
<blockquote>
<p>śūnyam iti na vaktavyam aśūnyam iti vā bhavet ubhayaṃ nobhayaṃ ceti
prajñaptyarthaṃ tu kathyate</p>
<p>Empty should not be asserted. Non-empty should not be asserted.  Neither both
nor neither should be asserted. They are only used nominally. (MMK 22.11)</p>
</blockquote>
<p>The essentialist believes that the emptiness being described is a concrete
characteristic of the ultimate reality, but the emptiness referred to
is reflexively empty itself. The choice of the word “empty” is just a matter of
convenience and doesn’t hold any innate essence itself.</p>
<p>Interestingly, Nagarjuna refused to defend emptiness as a standalone
metaphysical view. Since any such defense would invariably assert emptiness as
an intrinsic property of reality. His goal was to end all metaphysical
speculation, not replace one distorted view with another.</p>
<p>This is also why there is no “master argument” that establishes emptiness. An
argument for emptiness can only be made in response to a flawed essentialist
position.</p>
<hr>
<p>The soteriological purpose of this philosophy was to aid in the attainment of
nirvana by ending conceptual proliferation (<em>prapañca-nirodha</em>). According to
Buddhism, concepts are imprecise and cannot reflect the ultimate nature of
reality: which is unconditioned (<em>asankhata</em>) and only realized through direct
experience.</p>
<p>It’s also important to contextualize this work. Nagarjuna’s treatise was a
reaction to the rise of Abhidharma movement, which attempted to
rigorously systematize our understanding of the world. While this is
instrumentally useful, it’s wrong to consider any form of conditioned knowledge
to be universally true.</p>
<p>There are interesting parallels today with the rise of a physicalist
metaphysical fundamentalism. The Standard Model is undoubtedly useful in
helping us make reliably model certain systems, but that doesn’t mean it
represents a fundamental truth about the universe. Ultimately, it too is just
another “empty” conceptual construct.</p>
]]></description><link>posts/2019/09/24/shunyata.html</link><guid isPermaLink="false">https://www.varav.in/posts/shunyata.md</guid><pubDate>Tue, 24 Sep 2019 07:00:00 GMT</pubDate></item><item><title><![CDATA[Perspectives on Issue Tracking]]></title><description><![CDATA[<p>Bugs, issues, tickets: They go by many names but serve the same
purpose—tracking a task that needs to get done. It’s the
lifeblood of project management in the tech industry, where
nothing gets done that isn’t tracked somehow. And, like most
invented concepts, it’s simply a formalization of our innate ways
of thinking about tasks.</p>
<p>Humans have probably been trying to quantify work ever since we
started hunting together. But modern-day project management traces
its lineage back to 1911 when Frederick Taylor published <a href="https://www.marxists.org/reference/subject/economics/taylor/principles/">The
Principles of Scientific
Management</a>,
which aimed at systemizing the job of an individual worker to
maximize output for the enterprise.</p>
<p>Taylor targeted workers in the American steel industry, grounded
in the belief that they weren’t working at full capacity. He
promoted the use of <em>time studies</em> on different ways of performing
<em>atomic units of work</em>, like striking hot iron. If there is a
particular way of striking that’s quicker than the others, every
worker will be instructed to do it that way. He claimed that this
improved the overall productivity of the firm, leading to an
increase in the workers’ wages.</p>
<p>In a similar vein, today’s issue trackers attempt to turn the
organic process of creating software into a structured, manageable
science by atomizing work into trackable issues. There is a
plethora of tools to help you track these issues: JIRA, Github
Issues, Bugzilla, and Asana, to name a few. You can even use plain
old sticky notes if you like.</p>
<p>In the quest to carve out a market share, there’s been an
explosion of diversity in these tools. The underlying structures,
however, remain fundamentally the same.</p>
<h3 id="fundamentals-of-an-issue">Fundamentals of an Issue</h3>
<p>To understand what characterizes this issue, let’s look at how
issue trackers model them.</p>
<ul>
<li>Issues track <strong>unique</strong> items of work, with many trackers supporting an
explicit deduplication
<a href="https://help.github.com/en/articles/about-duplicate-issues-and-pull-requests">action</a>.</li>
<li>Issues often have clear <strong>ownership</strong> responsibilities; trackers sometimes
support multiple
<a href="https://confluence.atlassian.com/adminjiracloud/managing-project-roles-776636382.html">roles</a>.</li>
<li>Trackers allow you to <strong>organize</strong> issues by grouping them into components,
hotlists, sprints, releases, backlogs, etc.</li>
<li>Issues can also be <strong>related</strong> to each other, like a blocking relationship to
show dependency. Or parent-child relationships, which can be used to create a
<a href="https://www.atlassian.com/agile/project-management/epics-stories-themes">hierarchy</a>
of work items.</li>
<li>Issues go through a series of <strong>state transitions</strong>, from being <em>opened</em> when
initially created to <em>closed</em> when completed or no longer relevant. Some
trackers even allow you to define custom
<a href="https://confluence.atlassian.com/adminjiracloud/issue-workflows-844500760.html">workflows</a>
that manage this lifecycle.</li>
</ul>
<p>The process governing this lifecycle is largely determined by the
software development methodology that a team follows. If you’re
reading this in 2019, chances are that your team follows some
variation of the <a href="http://agilemanifesto.org/">Agile</a> method.
Browsing through top LinkedIn titles should show you that it’s a
pretty good time to get into the business of
<a href="https://www.scrumalliance.org/get-certified/scrum-master-track/certified-scrummaster">certifying</a>
scrum masters.</p>
<p>Although trackers base their data model on this simple construct,
they vary how it’s presented to the user based on the intent.
Driven by growing user needs and basic market forces, issue
trackers have evolved into complex tools that often serve multiple
purposes.</p>
<h3 id="issues-as-a-planning-tool">Issues as a Planning Tool</h3>
<p>From building extravagant monuments to daily commuting, planning
is ubiquitous in human activity. When set on achieving a goal, we
instinctively anticipate the future and prepare a plan of action.
Along these lines, issues that track expected work can be viewed
as tools that help map out the territory of the problem space
before breaking ground on execution.</p>
<p>The choice of methodology largely dictates the approach to
planning. Since Agile encourages an iterative approach to software
development, issues are created more on demand and have relatively
short lifespans. Teams are advised to stay flexible and respond
quickly to feedback. Since plans are liable to change, it’s less
useful to flesh out the details of a task further out.</p>
<p>Issues often have a dedicated field to store an estimate of task
effort, like <a href="https://www.mountaingoatsoftware.com/blog/what-are-story-points">story
points</a>.
The value in this field represents the approximate period of
uninterrupted work needed by an <strong>ideal</strong> engineer to complete the
task. The issues and estimates provide an overview that assists in
resource allocation and tracking project progress. There’s nothing
like a burndown chart to spice up a bland executive status report.</p>
<p>However, exact estimation is a tricky exercise. Behavioral science has long
known about the <a href="https://qz.com/work/1533324/daniel-kahnemans-planning-fallacy-explains-why-were-bad-at-time-management/">Planning
Fallacy</a>,
that we tend to greatly underestimate our task completion times.  Perhaps
unsurprisingly, social scientists have
<a href="http://web.mit.edu/curhan/www/docs/Articles/biases/67_J_Personality_and_Social_Psychology_366,_1994.pdf">found</a>
an actor-observer difference in our predictions. We tend to be much more
conservative when estimating others’ completion times.  It may be a good idea to
ask a teammate to keep you honest the next time you’re making estimates.</p>
<p>It’s also easy to fall into the trap of obsessing over the
accuracy of estimates while missing the bigger picture on the
purpose they ultimately serve.</p>
<h3 id="issues-as-task-lists">Issues as Task Lists</h3>
<p>When it comes time to execute, it’s convenient to have neat lists
of tasks for people to start work on. Assigning an issue to
someone holds them accountable for progress. However, a person
will usually have multiple issues assigned to them, and picking
the right one to work on is a dilemma.</p>
<p>Not all work is created equal, and some tasks are bound to be more
critical than others. To indicate this, trackers allow you to
specify priorities on issues and display issues in sorted order.
Most people in the tech industry will be familiar with the process
of triaging: ranking bugs by importance. It borrowed heavily from
the process of medical triage, which can be
<a href="https://www.ncbi.nlm.nih.gov/pubmed/29123897">traced</a> back to
Napoleon’s failed campaign in Egypt and Syria.</p>
<p>Before this, the seniority of an officer usually decided how they
were treated by medical staff. Faced with a dire strain on
resources, “Napoleonic triage” prioritized the treatment of
soldiers who could be sent back to fight in the battlefield. This
later evolved into a system that allocated medical resources based
on the severity of the condition as opposed to the rank of the
patient.</p>
<p>While the consequences of bug triage aren’t as severe, the same
principles apply. Issues should be prioritized by objective
severity metrics as opposed to subjective value judgments.</p>
<h3 id="issues-as-a-medium-of-communication">Issues as a Medium of Communication</h3>
<p>Despite the prevalent meme that all tech people are misanthropes,
day to day software engineering is very social. Sharing
information is crucial to performing our jobs in the
hyper-specialized world that we inhabit. Over time there has been
a steady increase in the number of communication tools available
to the average employee.</p>
<p>When it comes to sharing findings or progress updates on a task,
picking the right channel and determining the appropriate target
audience can be a challenge. There’s also the problem of
fragmentation, which makes it harder to aggregate discussions
about a particular task. To help solve this, trackers support
commenting on an issue.</p>
<p>On the surface, it seems like this just exacerbates the problem by
adding to the list of possible choices, but there’s something
deeper at play. Game theorists study coordination games in which
players maximize their payoff by picking the same action. They
have observed that players with no prior history tend to cluster
their choices around <a href="https://mindyourdecisions.com/blog/2008/04/01/focal-points-or-schelling-points-how-we-naturally-organize-in-games-of-coordination/">Schelling
points</a>,
which are semantically salient options. An issue provides a focal
point to which uncoordinated actors can anchor their discussion
about an ongoing task.</p>
<h3 id="issues-as-a-knowledge-repository">Issues as a Knowledge Repository</h3>
<p>Having a centralized coordination place for things related to a
task also simplifies the process of searching for information.
Other tools, like version control systems, are usually integrated
with issue trackers and link their transactional objects, like
code changes, to issues. The consolidated log of comments and
other items related to an issue forms an integral part of an
organization’s memory.</p>
<p>A chronology of actions on an issue also provides the basis for a
coherent
<a href="https://www.communicationtheory.org/the-narrative-paradigm/">narrative</a>,
weaving a story around a task. These stories allow us to play
through events and contextualize decisions. This is particularly
useful during post mortems. During such investigations, issue
histories are invaluable in tracking down culprits and figuring
out exactly why things went wrong.</p>
<h3 id="issues-as-outstanding-debt">Issues as Outstanding Debt</h3>
<p>When an issue is created, there is an implicit expectation that
the underlying task will be completed in the future. So another
way to think of issues is as a promise to deliver something at
some point. This sounds very similar to a concept anybody with a
credit card must be familiar with—debt.</p>
<p>Like interest on the principal amount, the longer an issue stays
open, the more the costs accumulate. For example, if the issue
tracks a code health improvement, developers working with the
codebase pay the running cost of having to deal with the bad code
while making changes.</p>
<p>One must be careful about stretching this analogy too far though.
Someone once told me about a team that had too many open bugs and
decided to declare <em>bug bankruptcy—</em>closing all unassigned bugs.
It initially seemed like a great idea, but within a few weeks,
they had almost the same number of bugs as before. Simply
addressing the symptoms doesn’t cure the actual disease!</p>
<p>The problem was never with the bugs themselves; they simply
represented the state of the software when contrasted with the
ideal. Closing the bugs without revising the ideal state didn’t
change the amount of work needed; it just temporarily erased the
effort people put into mapping out the steps to the ideal.</p>
<h3 id="all-things-in-moderation">All Things in Moderation</h3>
<p>Issue tracking is a handy tool but also tends to be overused. We
must keep in mind that most attempts to direct human effort
endorse a slightly adversarial view of human nature. There’s a
latent assumption that people won’t do the right thing until they
are explicitly instructed to, which isn’t necessarily true.</p>
<blockquote>
<p>Individuals and interactions over processes and tools.
 — <strong>Agile Manifesto</strong></p>
</blockquote>
<p>Scientific management also carries a strong undercurrent of high
modernist thinking, the belief that all natural processes can be
optimized by technology. As James Scott lays out in his book
<a href="https://yalebooks.yale.edu/book/9780300078152/seeing-state">Seeing Like a
State</a>,
the subtleties of our organic ways of doing things are not always
apparent to the planner focused on optimizing.</p>
<p>It’s especially important to remember this when working in an
industry that pays the bills by selling technology to solve
problems. Overly dictating how a worker should spend their time
deprives them of autonomy and amplifies feelings of monotony.
Sometimes, trusting people to do their jobs without excessive
supervision isn’t a terrible idea.</p>
]]></description><link>posts/2019/09/09/issue-tracking.html</link><guid isPermaLink="false">https://www.varav.in/posts/issue-tracking.md</guid><pubDate>Mon, 09 Sep 2019 07:00:00 GMT</pubDate></item><item><title><![CDATA[The Consumption Cycle]]></title><description><![CDATA[<p>Unless you’ve been living under a rock, you’re probably aware of the recent
decluttering frenzy, fueled by the popularity of Marie Kondo’s new
Netflix <a href="https://www.netflix.com/title/80209379">show</a>. As a slightly compulsive
neat freak, I wholeheartedly bought into the premise that you should only hold
on to things that trigger happiness. And while the “if it doesn’t spark joy, get
rid of it” mantra seems like sound advice at face value, it also has the
potential to trigger a vicious circle of overconsumption.</p>
<p>It all started with one of the semi-periodic purges of things that I own when I
vaguely recalled trying to get rid of the exact same item before. I was just
about to dismiss it as plain-old déjà vu when I got a little curious.</p>
<p>Being your stereotypical 20-something lazy millennial, I do most of my shopping
online. And one of the few advantages of living in a world where giant
corporations constantly track every move you make online with the sole purpose
of relentlessly maximizing their profits is that they sometimes let you take a
peek. So, I scoured through my unexpectedly long online order history and there
it was!</p>
<p>It wasn’t a hallucination, I actually ordered the same item twice. And although
the purchases were months apart, it made me feel enough remorse to start
thinking about my consumption patterns more deeply. Was I mindlessly throwing
away things which eventually led me to buy more to replace the stuff that I got
rid of in the first place?</p>
<p>Aside from the financial prudence in reducing my overall consumption, there’s
also the moral responsibility to mitigate my environmental impact, especially
given
the <a href="https://www.epa.gov/facts-and-figures-about-materials-waste-and-recycling/national-overview-facts-and-figures-materials">low</a> solid
waste recycling rates.</p>
<h2 id="sparking-joy">Sparking Joy</h2>
<p>To start off, I had to figure out how I valued things when choosing to discard
them. On careful analysis, I found that my instinctive value judgment of a thing
is broadly based on a couple of factors.</p>
<p>First, there is the <em>instrumental value</em> based on the utility or purpose that a
thing is meant for. Then, there is the <em>novelty value</em> that I ascribe to a thing
by virtue of its newness. Finally, there’s the <em>sentimental value</em> that a thing
possesses through a personal association with my experiences.</p>
<p>The relative weights of these factors would also vary for different categories
of things. For ornamental things (clothes, accessories, etc.), I give more
importance to novelty over sentimental value. Maybe because what I was wearing
isn’t a salient fact in my recollection of experiences, unless someone
compliments my look — which is rare given my fashion sense.</p>
<p>Given a fixed set of circumstances, the instrumental value of a thing stays
constant. Novelty, however, tends to fade off over time, which makes me more
likely to discard of older things.</p>
<p>Novelty also seemed to recover slightly, if I hadn’t encountered the item for a
while, although never completely back up to its initial levels. One strategy I
found to maximize the net lifespan of my clothes was to rotate through smaller
sets of clothes over a longer cycle. The <em>rest period</em> helped them regain some
of their novelty in my eyes.</p>
<p>To compensate for the fall in novelty, I could also increase sentimental
attachment to a thing through personalization. Laptop stickers are a great way
to reduce your urge to upgrade your machine. The more you make something feel
unique, the lesser you want to part with it.</p>
<h2 id="maximal-minimalism">Maximal Minimalism</h2>
<p>Since we’re on the topic of decluttering and consumption, I’d also like to
highlight some other ironies of the modern minimalism movement. Extreme versions
of minimalism can force you to possess an <em>unrealistically low</em> number of things
can actually lead to increased consumption.</p>
<p>While traveling, I once met someone who claimed to have backpacked across
Southeast Asia for months with nothing more than a medium-sized bag. I was
really impressed by their resourcefulness until they casually mentioned that
they would simply buy, use and dispose of things because they were so cheap.
Dude, that’s cheating!</p>
<p>I was also forced to consider whether the pursuit of minimalism was in some
ways, an <em>exercise in privilege</em>. It’s only when you’re absolutely certain that
you can easily re-acquire a similar thing, that you’re willing to get rid of it
without much deliberation. I felt bad for harshly judging grandmother for
hoarding piles of stuff that she rarely ever used. Maybe her habits were shaped
by the circumstances of scarcity that she grew up in.</p>
<p>There’s also a difference between “minimalism as a principle” and “minimalism as
an aesthetic”. The principle prescribes that you only own as many things as you
need — no more, no less. The aesthetic, however, entails a subjective assessment
of beauty based on higher-level visual features. These two things can often be
at odds.</p>
<p>In a lot of content promoting the minimalist aesthetic, there is this latent
assumption that a more ideal version of an already functioning thing that you
own exists. The monochrome ceramic pot may have fewer surface irregularities
than the chaffed up plastic one that the plant came in. But by purchasing it,
you now have one more additional thing than you need to.</p>
<p>Everybody’s life is different and you are the best judge of your own. The next
time you’re replacing or getting rid of something, think about what is driving
your behavior. Are you genuinely certain that the item no longer serves its
intended purpose or are you trying to conform to somebody else’s curated vision
of what an ideal lifestyle should look like?</p>
]]></description><link>posts/2019/08/06/consumption-cycle.html</link><guid isPermaLink="false">https://www.varav.in/posts/consumption-cycle.md</guid><pubDate>Tue, 06 Aug 2019 07:00:00 GMT</pubDate></item><item><title><![CDATA[Metaphysical Idealism]]></title><description><![CDATA[<p>In his 1995 <a href="http://consc.net/papers/facing.html">paper</a>, Australian philosopher
David Chalmers formulated what he called the “Hard Problem of Consciousness”.</p>
<blockquote>
<p>The really hard problem of consciousness is the problem of experience. When we
think and perceive, there is a whir of information-processing, but there is
also a subjective aspect. As Nagel has put it, there is <em>something it is
like</em> to be a conscious organism. This subjective aspect is experience.</p>
</blockquote>
<p>According to Chalmers, the “easier” problems such as the ability to categorize
objects, observation of internal states, the direction of attention, etc. were
explainable within the framework of physicalism — as the result of entirely
physical
processes. <a href="https://ai.google/research/pubs/pub46201">Recent</a> <a href="https://openai.com/blog/better-language-models/">advances</a> in
artificial intelligence research, particularly with the advent of neural
networks, have shown that this is mostly accurate. The “hard” problem of
subjective experience, however, can not be explained materialistically.</p>
<p>This point is also illustrated by the philosophical zombie (p-zombie) thought
experiment. A p-zombie looks and acts like a regular human being but has no
inner subjective experience. It will laugh at your jokes, scream out when hit
and maybe have long discussions on the philosophy of mind. But, there would be
no inner subject to any of its experiences. As computers get better at
performing tasks that were traditionally considered hallmarks of sentient
beings, I’m more convinced that such a being could theoretically exist.</p>
<p>Since consciousness is such a heavily overloaded term, it makes sense to clarify
what I mean. I take consciousness to be the <em>substrate of all mental
experiences</em> — sensory perceptions, thoughts, feelings, etc. I’ll use the
terms experiences and consciousness somewhat interchangeably in this article.</p>
<p>So, where does consciousness stem from?</p>
<hr>
<p><strong>Physicalism</strong> is the doctrine that posits that reality fundamentally consists
only of physical things (like matter) and any other kind of thing (including
mental phenomena) is ultimately derived from a physical basis. An extreme
physicalist will deny that anything like subjective experience even exists
because it cannot be objectively measured and quantified by an external
observer — as Daniel Dennett argues in his book <a href="https://en.wikipedia.org/wiki/Consciousness_Explained">Consciousness
Explained</a>. In other
words, <em>we’re all p-zombies</em>. This argument seems a little ridiculous to
me, since it basically tries to “define away” the problem — if only this 
worked for all my problems in life. And also because we can only objectively 
measure things through subjective experiences. Even Descartes, who started 
from a place of radical skepticism of all knowledge, famously postulated 
“cogito, ergo sum” (I think therefore I am), establishing the existence of an 
experiencing self as axiomatic.</p>
<p>A slightly more reasonable physicalist will claim that mental experiences exist
but are an <strong>epiphenomenon</strong> (a fancier way of saying side-effect) of
bioelectric neural activity that occurs in our brain. But, the causal link is
unidirectional, i.e. physical causes produce mental effects, but mental activity
does not affect the physical realm. This was a theory that I previously
subscribed to. Until, it was pointed out to me that if this were so, and the
mind does not influence the physical, how are we <em>reflectively aware</em> of the
fact that we have subjective experiences? There would be no need to explain the
presence of a thing that we would have no knowledge of since the basis for any
knowledge would also have to be something physical.</p>
<p>Then there’s the view that mental experiences are emergent from sufficiently
complex interactions between physical systems. <strong>Emergentism</strong> proclaims that
although mental experiences are the result of purely physical processes, their
properties are somehow novel and irreducible to the properties of their
constituent physical parts. These emergent properties can also interact with the
lower level physical systems through “downward causation”. While this theory
seems alluring because it doesn’t require postulating an additional class of
elementary substance, it does require a spooky set of laws that kick in once
things get complex enough. I find it hard to believe that apart from fundamental
physical laws (standard model and gravity) that govern the behavior of every
other thing, there’s a mysterious set of hitherto unknown laws that apply
especially to things once they hit some threshold of organizational complexity.</p>
<hr>
<p>Now, we enter the territory of ontological dualism, the idea that reality
consists of distinct mental and physical realms, although, there may be a set
of <em>bridging laws</em> governing their interaction. First, there’s <strong>substance
dualism</strong>, the idea that mental phenomena are the product of a different kind of
substance, a kind of <em>élan vital</em>. The issue here is that the influence of élan
vital on physical objects would violate other physical fundamental
principles — like the conservation of energy. And given that biologists have
for centuries been looking for evidence to support vitalism and found none, I’m
inclined to believe this theory is going the way of <em>luminiferous aether</em>.</p>
<p>There’s also the issue that it’s not entirely clear whether mental and physical
properties are clearly separable and if one can exist without independent of
other. Gilbert Ryle argues in his book <a href="https://en.wikipedia.org/wiki/The_Concept_of_Mind">The Concept of
Mind</a> that the Cartesian
dualist conception of a mind separate from a body is a fallacy resulting from
a <em>category mistake</em>.</p>
<p>Then, there’s <strong>property dualism</strong> which suggests that like other physical
properties (charge, mass), fundamental particles also have mental properties.
This implies some form of <em>panpsychism</em> — the idea that all objects have some
form of consciousness. But, this isn’t representative of consciousness as we
experience it. Even though my body consists of zillions of fundamental
particles, my own experiences every moment seem remarkably integrated. This
brings us to the <em>combination problem</em>, to which I haven’t found a satisfactory
explanation yet.</p>
<hr>
<p>Let’s step back for a moment and recognize the primacy of subjective
experiences. The experience you’re probably feeling this very instant as you
read this sentence — unless you’re a machine learning model being trained on a
dataset of mediocre Medium articles. Subjective experiences are the only carrier
of reality through which we “know” of anything else.</p>
<p>Tired of looking from the outside in for the source of consciousness that was
leading to nowhere, I decided to flip the script and start with consciousness as
the fundamental primitive and tried to explain the <em>apparently independent</em>
physical realm in terms of consciousness.</p>
<p>Occam’s razor suggests that a monist ontology is superior, if it has the same
explanatory power as a dualist one. So, why do we need to assume a thing outside
of consciousness? To explain a couple of things really.</p>
<p>To start off, we <em>intuitively perceive</em> external objects as physical things.
But, things don’t really need to actually be physical in any sense for us to
perceive them as external. Just consider your own experience from when you
dream. You perceive objects (of a somewhat lower fidelity) that are external to
you. But, the basis for these objects is entirely mental. You could conceive of
a dream where you perform Rutherford’s gold foil experiments, but it doesn’t
make the dreamt up gold foil any more physical.</p>
<p>Then, there’s the fact that reality displays remarkably <em>stable patterns of
regularity</em> and is also incredibly <em>consistent across observers</em>— contrasted
with the transience and impermanence of our internal mental realm. If I measure
how long it takes for my cup to fall from my desk to the floor today and repeat
the same experiment tomorrow, regardless of how I’m feeling then, the values
will be the same. And, if you measure how long it takes for my cup to fall,
you’ll likely get the same value as me — unless you happen to be moving close
to the speed of light.</p>
<p>The idealist explanation for consensus reality is that all sentient beings are
just localized dissociations in a higher being or <strong>universal mind</strong> (Advaita
Vedanta’s Brahman, Hegel’s Das Absolute, Spinoza’s God). This higher being
subsumes not just all experiencing beings, but also insentient
things-in-themselves or noumenon. The higher being manifests itself through the
order that we perceive in the world around us, in the fundamental laws of time,
matter, space and causation. There is no <em>ultimate cause</em> that brought about
this being because causation itself is just another concept that operates within
the being. This is similar to pantheism — the idea that all of reality is
identical with an immanent God.</p>
<blockquote>
<p>I believe in Spinoza’s God, who reveals himself in the harmony of all that
exists, not in a God who concerns himself with the fate and the doings of
mankind. — <strong>Albert Einstein</strong></p>
</blockquote>
<p>As a former “new atheist”, I was initially very skeptical of the existence of
any kind of higher being. But, the more I thought about it, the less it seemed
like an unsubstantiated leap of faith and more as an extrapolation from what is
readily observable. In fact, the burden of proof seems to lie more on the side
proposing the existence of an entirely separate ontological category that we can
never experience directly but only know through indirect abstractions.</p>
<p>Science is simply a collection of explanations and predictions about everyday
experience and doesn’t promote any particular metaphysical viewpoint.
Self-important experts on science, however, would have us believe that they know
all there is to know about the nature of the universe and it consists only of
abstract material things that operate under complex rules hard for the average
person to understand. Anybody who disagrees or suggests an alternative viewpoint
is either stupid and holding on to archaic views.</p>
<p>When it comes to the nature of reality trust the preeminence of your own
experience over the word of some intelligent-sounding elite in an ivory tower.
Or some random dude’s post on the internet for that matter.</p>
<p><em>P.S. If you’re interested in knowing more about absolute idealism, I’d highly
recommend reading <a href="https://www.bernardokastrup.com/2015/03/brief-peeks-beyond-overview.html">Brief Peeks
Beyond</a> by
Bernardo Kastrup.</em></p>
]]></description><link>posts/2019/06/28/metaphysical-idealism.html</link><guid isPermaLink="false">https://www.varav.in/posts/metaphysical-idealism.md</guid><pubDate>Fri, 28 Jun 2019 07:00:00 GMT</pubDate></item><item><title><![CDATA[Nyayasutra]]></title><description><![CDATA[<p>Given the increasingly polarizing times that we live in, far too often have I
seen debates that seem to lead nowhere. Words continue to be exchanged but ideas
are lost in translation. The instinctual response is to assume that the opponent
is either stupid, pushing an agenda or arguing in bad faith. While this may be
true in some cases, if both parties are united in their search for truth,
well-intentioned arguments can be resolved by a healthy dose of meta-awareness
about the protocols of debate.</p>
<p>Rather than consult a modern-day rationality guru (who probably just wants to
sell me his latest book) on the topic of structured debate, I decided to look a
little further back in the past for inspiration. This brought me an ancient
Sanskrit text called the <strong>nyāyasūtra</strong>. I was glad to see that it wasn’t still
covered by copyright and available online
for <a href="https://archive.org/details/TheNyayaSutrasOfGotama">free</a>, thanks to some
kind stranger on the internet.</p>
<p>Like a lot of texts from this period, it was probably composed in many layers by
multiple authors. According to early estimates, it was initially composed around
the 6th century BC by an Aksapada Gautama — not to be confused with the more
famous <a href="https://en.wikipedia.org/wiki/Gautama_Buddha">Gautama</a>. This was an
exciting time in the Indian subcontinent, there was a flourishing of independent
philosophical movements that challenged the traditional Vedic orthodoxy. This is
also reflected by several verses (2.1.58–2.1.69) that deal with the
inconsistencies and reliability of the knowledge in the Vedas. Vedic, Ajivika,
Charvaka, Buddhist and Jain philosophers debated each other on a variety of
topics ranging from the “existence of the soul” to the “workings of the law of
karma”.</p>
<p>Some of these debates happened in front of a panel of judges (<strong>madhyastha</strong>),
usually led by the royal who was paying for the whole exercise. There was a
proposition and one side would make the case for (<strong>pakṣa</strong>) the motion and
another side against (<strong>pratipakṣa</strong>), with the judges declaring when one side
is finally defeated. Part of the text appears to be a distillation of these
rules (<strong>nyāya</strong>) of debate in that somewhat formal context.</p>
<h2 id="types-of-debates">Types of Debates</h2>
<p>Let’s start with a classification of the varieties of debates that we encounter.
This classification is not based on the topic under discussion, but the attitude
of the interlocutors. The verses (1.2.1–1.2.3) list out three kinds of debates.
I like to think of these as more points on a scale than strict categorization.</p>
<ol>
<li><strong>vādaḥ</strong> — An honest debate with each both sides attempting to discern the
true nature of the subject under discussion. The rare ideal case.</li>
<li><strong>jalpaḥ</strong> — A tricky debate, where either side may use deceptive tactics to
help them win. These tactics may keep both parties engaged in discussion, but
it doesn’t help us get any closer to the truth of the matter under
consideration.</li>
<li><strong>vitaṇḍā</strong> — A destructive debate, where the only goal of the opponent is to
destroy the other person’s argument without attempting to establish an
alternative proposition. This pretty much sums up every prime-time TV news
debate nowadays.</li>
</ol>
<p>While the extremes are easy to recognize, a tricky debate is harder to identify,
because the tricks may be subtle. Which is why the text lists out these tricks
in meticulous detail. Gautama apparently noticed way back then what Buzzfeed
realized today — that people freaking love lists of things!</p>
<p>The most common class of tricks I’ve come across is quibbling (<strong>chala</strong>) — like
arguing over the syntax when the meaning is clear from context, exacerbating a
relatively minor flaw or taking a metaphor literally (1.2.14). There’s also the
futile objections (<strong>jāti</strong>) — like an objection that presupposes their
proposition (5.1.21), objecting to the absence of evidence as evidence of
absence (5.1.29) or engaging in whataboutism (5.1.43). Finally, there’s the
confounding and contradictory tactics that are an occasion for direct
disqualification (<strong>nigrahasthāna</strong>) — like shifting the proposition (5.2.3),
making incoherent arguments (5.2.10) or <em>literally</em> running away from the debate
(5.2.20).</p>
<h2 id="anatomy-of-an-argument">Anatomy of an Argument</h2>
<p>To make this more relevant to current times, I’ll consider the example of global
warming — which I mostly consider to be true. This article isn’t meant to
provide a balanced view of the evidence for and against climate change and I’m
just using it as an example for illustrative purposes. To start off, we need to
establish the parts of an argument. The below sutra mentions 5 members.</p>
<blockquote>
<p><strong>pratijñāhetūdāharaṇopanayanigamanāni avayavāḥ</strong> (1.1.32)</p>
</blockquote>
<ol>
<li><strong>pratijñā</strong> — The proposition to be established. <em>The planet is warming
because of the burning of fossil fuels.</em></li>
<li><strong>hetu</strong> — The reasoning behind the proposition. <em>Burning fossil fuels emit
carbon dioxide.</em></li>
<li><strong>udāharaṇa</strong> — An example of a familiar instance. <em>Carbon dioxide buildup in
an outdoor greenhouse causes the temperature to rise.</em></li>
<li><strong>upanaya</strong> — An application of the reasoning to the example. <em>Burning fossil
fuels causes an atmospheric carbon dioxide increase similar to that simulated in
a greenhouse.</em></li>
<li><strong>nigamana</strong> — The conclusion of the argument; usually just a restatement of
the proposition. <em>Burning fossil fuels cause the planet to warm.</em></li>
</ol>
<p>This looks like a pretty straightforward inference schema. If you think this
feels a little over-specified, you are not alone. Later Buddhist philosophers
also pointed this out and preferred fewer steps in the establishment of an
argument. Anyways, nothing wrong with erring on the side of more rigor.</p>
<p>Once I’ve established my argument, my opponent could then start objecting to the
truth in each of my claims (<em>is global temperature really rising?</em>) and I would
present additional supporting arguments (<strong>tarka</strong>) or refute their objections.
This brings us to a very pressing question in current times, what qualifies as
“the truth”?</p>
<h2 id="theory-of-knowledge">Theory of Knowledge</h2>
<p>The Nyaya school emphasizes belief in objective truth and lays out the
acceptable means of knowledge or proof (<strong>pramāṇa</strong>) to realize that truth. The
below sutra deals with a basic epistemological classification.</p>
<blockquote>
<p><strong>pratyakṣānumānopamānaśabdāḥ pramāṇāni</strong> (1.0.3)</p>
</blockquote>
<ol>
<li><strong>pratyakṣa</strong> — Direct sensory perception of the object. <em>Observing regular
temperature readings over a prolonged period.</em></li>
<li><strong>anumāna</strong> — Deductive inference based on cause (<strong>pūrvavat</strong>) and effect
(<strong>śeṣavat</strong>) or a generalization (<strong>sāmānyatodṛṣṭaṃ</strong>). <em>Rising temperatures
cause more ice to melt which can be observed by measuring the size of polar ice
caps.</em></li>
<li><strong>upamāna</strong> — Comparison to a similar thing._ Comparing the effects of carbon
dioxide buildup in the earth’s atmosphere to the conditions inside a
greenhouse._</li>
<li><strong>śabda</strong> — Testimony of reliable sources. <em>Citing articles from
peer-reviewed journals.</em></li>
</ol>
<p>Preferring a more minimalist approach, Buddhists only accepted perception and
inference as valid means of knowledge. But, their theory of inference was pretty
advanced and also covers the remaining two categories as special cases of
inference. The Charvakas interestingly did not accept anything but direct
perception as the only “true” means of knowledge and although they did accept
inference as a useful tool, they also considered it a source of errors.</p>
<p>The most contentious point, however, was what classified as a “reliable” source.
Vedic scholars considered the Vedas to be reliable. Similarly, with Buddhists
and the teachings of Buddha. The Charvakas, being hardcore skeptics, considered
none of these reliable. Given the recent internet-fueled rise of “fake news” and
“filter bubbles”, I’d say humans aren’t much closer to solving this problem
today than we were a couple of millennia ago.</p>
<h2 id="fallacious-reasoning">Fallacious Reasoning</h2>
<p>It’s become increasingly fashionable of late to memorize long lists of logical
fallacies and call people out on them when debating. Turns out that this isn’t
an entirely new phenomenon. The below sutra contains a list of logical fallacies
(<strong>hetvābhāsa</strong>) to watch out for in an argument.</p>
<blockquote>
<p><strong>savyabhicāraviruddhaprakaraṇasamasādhyasamakālātītāḥ hetvābhāsāḥ</strong> (1.2.4)</p>
</blockquote>
<ol>
<li><strong>savyabhicāra</strong> — An argument that is too general and doesn’t establish any
particular proposition or supports multiple propositions. <em>Global warming is not
caused by fossil fuel emissions because no climate model is perfect.</em></li>
<li><strong>virudh</strong> — Reasoning that contradicts the proposition to be
established. <em>The planet isn’t warming because temperatures are rising very
slowly.</em></li>
<li><strong>prakaraṇasama</strong> — Circular reasoning. <em>Global warming is not caused by
fossil fuel emissions because fossil fuel emissions don’t cause global warming.</em></li>
<li><strong>sādhyasama</strong> — An argument that makes unsubstantiated claims. <em>Global
warming isn’t a thing because the planet is actually cooling.</em></li>
<li><strong>kālātīta</strong> — An argument that may have been valid in the past, but is no
longer true. <em>Humans are not causing global warming because human activity does
not produce a lot of greenhouse gases.</em></li>
</ol>
<p>This list is similar in function to the list of futile objections (<strong>jāti</strong>), in
that they could be used to refute the opponents reasoning. Having a common
vocabulary and shared understanding between the participants as to what these
terms meant would have certainly helped all parties.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This text was by no means unanimously accepted and different schools of thought
had different rules. Several Buddhist philosophers wrote scathing commentaries
(famously Nagarjuna’s <strong>vaidalyaprakaraṇa</strong>) on the nyāyasūtra, attacking
several core theses in a systematic manner — like a pre-modern philosophical
diss-track.  And, like any living tradition, the form and structure of these
debates evolved over time. Nonetheless, it was interesting to consider the
relevance of an ancient text to modern times.</p>
<p>Although the medium of interaction has undergone radical change, the people we
interact with have not changed much. Keep a printout of this article in your
back pocket for the next time you end up in an argument with someone and need
some tips on how to proceed.</p>
]]></description><link>posts/2019/06/14/nyayasutra.html</link><guid isPermaLink="false">https://www.varav.in/posts/nyayasutra.md</guid><pubDate>Fri, 14 Jun 2019 07:00:00 GMT</pubDate></item><item><title><![CDATA[Procedural Dungeon Generation]]></title><description><![CDATA[<div class="notice">
**This is an interactive article, play with the settings. Click on the canvas to
reanimate**.
</div>

<p>Procedural generation has always interested me. From the
<a href="http://n0tch.tumblr.com/post/4231184692/terrain-generation-part-1">landscapes</a>
of Minecraft to the hundreds of
<a href="http://www.roguetemple.com/roguelike-definition/">rougelikes</a>, procedural
generation makes any game a more unpredictable and brings near infinite replay
value to the game. The basic principle is to use a source of randomness - or
pseudo-randomness; to create environments according to some set of rules.</p>
<h2 id="outline">Outline</h2>
<p>So, what makes a dungeon? Very simply, rooms connected by corridors. Let’s start
with the rooms.</p>
<p><a href="https://www.reddit.com/r/gamedev/comments/1dlwc4/procedural_dungeon_generation_algorithm_explained/">One</a>
approach to generate the basic skeleton is to create a number of randomly sized
rectangles at some point and then iteratively separate them.</p>
<p><a href="http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation">Another</a>
way is to use Binary Space Partitioning. We recursively split the available
space - either vertically or horizontally; until we reach an ideal size or
exceed some depth. Now a room can be a randomly sized rectangle contained within
any partition. This relatively simple method that yields pretty decent results.
And we don’t have to worry about separating the overlapping rooms since
partitions are mutually exclusive.</p>
<h2 id="partitions">Partitions</h2>
<p>Each partition can be thought of as a node in a tree that that encloses all its
children or a leaf in the tree that is simply a rectangle. A parent partition
can be split to make child partitions.</p>
<p>Since splitting evenly will simply give us a uniform set of partitions, we vary
the split point by some distance about the middle. When we split parent, we need
to pick the <em>direction</em> and <em>ratio</em>. The <em>ratio</em> can be controlled by using the
<code>varf</code> parameter that is range around midpoint that you want to split in.</p>
<pre><code class="language-js">let f = random.nextFloat(0.5 - varf, 0.5 + varf);
this.children = this.rect.split(f, axis).map(half =&gt; {
    return new Partition(half, { sqf, varf }, depth - 1);
});</code></pre>
<p>The <em>direction</em> is another way to control the shape of the resultant partitions.
Notice that the ratio of <code>width</code> to <code>height</code> of a square is closer to 1 than a
rectangle. To use this to our advantage, we can apply a bias to our <code>choice()</code>
that is the ratio of the width to the height.</p>
<pre><code class="language-js">let bias = this.rect.w / this.rect.h;</code></pre>
<p>We make a choice to split either vertically or horizontally based on the <code>bias</code>
and an exponent (<code>exp</code>).</p>
<pre><code class="language-js">function choice(bias = 1, exp = 1) {
    return Math.random() * Math.pow(bias, exp) &lt; 0.5;
}</code></pre>
<p>Modulate the squariness (<code>sqf</code>) to prefer vertical splits when <code>bias &gt; 1</code> which
gives rise to <em>squarer</em> children.</p>
<pre><code class="language-js">let axis = choice(bias, sqf) ? &#39;y&#39; : &#39;x&#39;;</code></pre>
<div class="controls center-flex">
    <span class="control center-flex">
        <label for="split-var-slider"> Split Variance (<tt>varf</tt>) </label>
        <input id="split-var-slider" type="range" min="0" max="0.5" step="0.05" />
    </span>
    <span class="control center-flex">
        <label for="squariness-slider"> Squariness (<tt>sqf</tt>) </label>
        <input type="range" id="squariness-slider" min="0" max="2.5" step="0.25" />
    </span>
    <button class="gen-button"> Generate </button>
</div>

<div id="partitions-container" class="demo center-flex"></div>

<h2 id="rooms">Rooms</h2>
<p>From these partitions we can create our rooms. Let’s start with clipping
partitions to a grid.</p>
<pre><code class="language-js">for (let part of root) {
  part.rect.scale(1 / gridSize).round();
}</code></pre>
<p>Now, we iterate through the leaf nodes of the tree. We first discard any leaves
that are too small to make a decent sized room. Then, for each leaf, we take its
bounds and make a randomly sized (<code>w</code> and <code>h</code>) room with random offsets (<code>x</code> and
<code>y</code>). It’s also a good idea to maintain some prescribed minimum spacing
(<code>roomSpace</code>) between adjacent rooms.</p>
<pre><code>let w = random.nextInt(minDim, Math.min(r.w - roomSpace, maxDim));
let h = random.nextInt(minDim, Math.min(r.h - roomSpace, maxDim));
let x = r.x + random.nextInt(roomSpace, r.w - w);
let y = r.y + random.nextInt(roomSpace, r.h - h);
rooms.push(new Room(new Rect(x, y, w, h)));</code></pre><p>We can control the bounds on the dimensions of the rooms we make using the
<code>minDim</code> and <code>maxDim</code> parameters.</p>
<p>We could also modify the recursive split function to further split spaces that are
larger than what we want and discard smaller spaces.</p>
<div class="controls center-flex">
    <span class="control center-flex">
        <label for="min-dim-slider"> Minimum Dimension (<tt>minDim</tt>) </label>
        <input id="min-dim-slider" type="range" min="4" max="6" step="1" />
    </span>
    <span class="control center-flex">
        <label for="max-dim-slider"> Maximum Dimension (<tt>maxDim</tt>) </label>
        <input id="max-dim-slider" type="range" min="8" max="12" step="2" />
    </span>
    <button class="gen-button"> Generate </button>
</div>

<div id="rooms-container" class="demo center-flex"></div>

<h2 id="spans">Spans</h2>
<p>Now that we have our rooms, we have to connect them. A simple minimum spanning
tree will suffice for this.</p>
<p>Initialize sets to keep track of <code>remaining</code> and <code>connected</code> rooms. Starting
with the first room in <code>connected</code> and the rest in <code>remaining</code>.</p>
<pre><code>let connected = new Set(rooms.slice(0, 1));
let remaining = new Set(rooms.slice(1));</code></pre><p>Then, keep connecting the nearest <em>unconnected</em> room until there are none left.</p>
<pre><code>while (remaining.size != 0) {
    let [room, nearest] = findNearest(connected, remaining);
    let pair = new Set([room, nearest]);
    if (!corridors.has(pair)) {
        this.corridors.set(pair, true);
        remaining.delete(nearest);
        connected.add(nearest);
    }
}</code></pre><div id="spans-container" class="demo center-flex"></div>

<h2 id="corridors">Corridors</h2>
<p>For each span, we also have to plot a corridor between the two rooms.</p>
<p>If there is an overlap (on any axis) between the rooms, then we have two sides
facing each other which we can connect in two different ways - either straight
or staggered.  We can make a random choice between either of these with a bias
(<code>straightBias</code>) parameter to control their relative distribution.</p>
<p><figure><img alt="Straight Corridor" src="/static/images/dungeon/straight.png" /><figcaption>Straight Corridor</figcaption></figure></p>
<p><figure><img alt="Staggered Corridor" src="/static/images/dungeon/staggered.png" /><figcaption>Staggered Corridor</figcaption></figure></p>
<p>But, if there is no overlap, then we fallback to connecting the rooms with a
right-angled corridor.</p>
<p><figure><img alt="Right-Angled Corridor" src="/static/images/dungeon/right-angled.png" /><figcaption>Right-Angled Corridor</figcaption></figure></p>
<div class="controls center-flex">
    <span class="control center-flex">
        <label for="stag-bias-slider"> Straight Bias (<tt>straightBias</tt>) </label>
        <input id="stag-bias-slider" type="range" min="0" max="2" step="0.5" />
    </span>
    <button class="gen-button"> Generate </button>
</div>

<div id="corridors-container" class="demo center-flex"></div>

<p>And that’s pretty much it, you now have the blueprint of a dungeon. Check out
the <a href="https://github.com/vasuman/dungeon-gen">full source code</a>.</p>
<style>
.notice {
    text-align: center;
    font-size: large;
    margin: 0.7em;
    padding: 0.3em;
    background-color: #eee;
}

.demo {
    text-align: center;
    padding-top: 1em;
    padding-bottom: 1em;
}

.center-flex {
    display: flex;
    align-items: center;
    justify-content: space-around;
}

.controls {
    justify-content: space-around;
    margin: 1em;
    padding: 0.5em;
    border: 5px outset #eaeaea;
    background-color: #f0f0f0;
}

.control {
    flex-flow: column;
}

input[type=range] {
    width: 10em;
}

.gen-button {
    padding: 0.3em;
}

.wgl-canvas {
    display: block !important;
    max-width: 100% !important;
    height: auto !important;
}

.wgl-container {
    display: block !important;
}

.wgl-container::before {
    content: "Click on the canvas to reanimate";
}
</style>
]]></description><link>posts/2016/05/25/dungeon.html</link><guid isPermaLink="false">https://www.varav.in/posts/dungeon.md</guid><pubDate>Wed, 25 May 2016 07:00:00 GMT</pubDate></item><item><title><![CDATA[DSL in Python]]></title><description><![CDATA[<p>This post was in my drafts folder for quite a while and I suddenly felt the urge
to publish it. A while back <a href="https://github.com/vasuman/snek-lang">wrote a DSL</a> built on Python for some
college-related work. The goals for this exercise included syntax similarity
and a runtime that is based in Python. So, here are a few notes on the experience.</p>
<h2 id="tokenizer">Tokenizer</h2>
<p>Arguably, one of the most prominent yet contentious points about the Python
syntax is it’s whitespace sensitivity. What do you use? 1 tab, 2
spaces, 4 spaces, 2^16 spaces!! A sensible editor configuration usually shields
you from the quirks of this, but the point is that, indentation styles are not
standard, some prefer tabs others spaces.</p>
<p>Python’s <code>tokenizer</code> module is pretty handy to help handle the indentation
problem. It does this by converting your source file to stream of tokens with
two special tokens – namely <code>INDENT</code> and <code>DEDENT</code> marking the starts and ends
of indented blocks respectively. In my experience, these markers are equivalent
to the block delimiters in other languages – usually braces (<code>{</code>, <code>}</code>).</p>
<h3 id="example">Example</h3>
<p>Let’s say we want to introduce a special language construct to swap the values
held in two variables with a <code>x &lt;=&gt; y</code> infix operator.</p>
<p>Here is an example. Consider the following segment of
code,</p>
<pre><code class="language-py">def swap(a, b):
    a &lt;=&gt; b</code></pre>
<p>On tokenizing this piece of code – <em>as a string</em> stored in <code>s</code>,</p>
<pre><code class="language-py">import tokenize
import io
b = io.BytesIO(s)
tokenize.tokenize(b.readline)</code></pre>
<p>We get,</p>
<pre><code>2,0-2,2:    NAME    &#39;def&#39;
2,3-2,7:    NAME    &#39;swap&#39;
2,7-2,8:    OP  &#39;(&#39;
2,8-2,9:    NAME    &#39;a&#39;
2,9-2,10:   OP  &#39;,&#39;
2,11-2,12:  NAME    &#39;b&#39;
2,12-2,13:  OP  &#39;)&#39;
2,13-2,14:  OP  &#39;:&#39;
2,14-2,15:  NEWLINE &#39;\n&#39;
3,0-3,1:    INDENT  &#39;\t&#39;
3,1-3,2:    NAME    &#39;a&#39;
3,3-3,4:    OP  &#39;&lt;&#39;
3,4-3,5:    OP  &#39;=&#39;
3,5-3,6:    OP  &#39;&gt;&#39;
3,7-3,8:    NAME    &#39;b&#39;
3,8-3,9:    NEWLINE &#39;\n&#39;
4,0-4,0:    DEDENT  &#39;&#39;
4,0-4,0:    ENDMARKER   &#39;&#39;</code></pre><p>As you can see, the module takes care of the whitespace problem,
delimiting blocks clearly. An additional benefit of using this module
is that it,</p>
<ul>
<li>Extracts <strong>string literals</strong></li>
<li>Handles code <strong>comments</strong></li>
</ul>
<h2 id="parsing">Parsing</h2>
<p>The parser would simply generate equivalent Python Abstract Syntax Tree for
constructs in my language. Though, <a href="#">PEG</a>s are powerful, I found writing a
custom recursive descent parser was way more convenient, understandable and
helped in printing sensible error messages.</p>
<p>The <code>ast</code> module is a handy tool for handling ASTs.</p>
<p>While it is ideal to build an AST from ground up, my strategy for generating
was a bit hack-ish. I used string interpolation to generate Python source code
that was then <code>ast.parse</code>d.</p>
<p>For example, to generate code that swaps the values in two variables <code>a</code> and
<code>b</code>.</p>
<pre><code class="language-py">src=&#39;&#39;&#39;
{0}, {1} = {1}, {0}
&#39;&#39;&#39;

import ast
module = ast.parse(src.format(&#39;a&#39;, &#39;b&#39;))</code></pre>
<h2 id="span-classmonoevalspan-is-your-friend"><span class="mono">eval</span> is your friend</h2>
<p>Now that you have your Python AST what do you do with it? Well, you <code>compile</code>
it to generate a <code>code</code> object that can be evaluated.</p>
<pre><code class="language-py">code = compile(module, &#39;&lt;generated-src&gt;&#39;, &#39;exec&#39;)</code></pre>
<h3 id="namespaces">Namespaces</h3>
<p>By manipulating the appropriate namespace dictionaries, you can change the
<code>globals</code> and the <code>locals</code> of the executed code. This is useful for injection
of required values and extraction of execution results.</p>
<h3 id="example-1">Example</h3>
<p>Setup the dictionaries,</p>
<pre><code class="language-py">env_globals = {}
env_locals = {}</code></pre>
<p>Inject parameters,</p>
<pre><code class="language-py">env_locals[&#39;a&#39;] = 10
env_locals[&#39;b&#39;] = 1</code></pre>
<p>And execute.</p>
<pre><code class="language-py">eval(code, env_globals, env_locals)
print env_locals</code></pre>
]]></description><link>posts/2016/01/01/python-dsl.html</link><guid isPermaLink="false">https://www.varav.in/posts/python-dsl.md</guid><pubDate>Fri, 01 Jan 2016 08:00:00 GMT</pubDate></item><item><title><![CDATA[Proof-of-like]]></title><description><![CDATA[<p>Not surprisingly, I spend most of my free time browsing the
inter-webs. I come across a lot of things that I <em>like</em>. But as a
random stranger it is hard to convey that sentiment in a convenient
yet meaningful way.</p>
<p>To be fair, most sites integrate the Facebook Like button or something
in that vein. But my major qualm with these systems is that they
require you to <strong>log in</strong>, tying your entire online identity to the
act of liking. You basically broadcast your interests to the entire
world. Also, these buttons are more about sharing content with your
peers on social networks.</p>
<p>This got me thinking as to whether there is a way for somebody to like
something <strong>anonymously</strong> on the Internet. The biggest problem that
came to mind was <em>spam</em> – what is to stop somebody from abusing the
system? Now, of all the spam combating methods out there the one I
found most innovative was <a href="http://www.hashcash.org/">Hashcash</a>. And so, I went about
approaching the problem with that in mind. This brings me to
<a href="http://en.wikipedia.org/wiki/Proof-of-work_system">proof-of-work systems</a>.</p>
<h2 id="proof-of-work">Proof-of-work</h2>
<p>Proof-of-work systems have been around for a while now. The basic
principle is that, there is a class of problems for which it is hard
to find a solution. Though, once a solution is found, verifying that
it is valid is relatively easy. There is a fundamental <strong>asymmetry</strong> in
the computational power required between finding and verifying a
solution to such problems. This characteristic is exploited to build
systems in which one party can trivially ensure the another party has
– within limits; expended some amount of computational resource (CPU
or memory).</p>
<p>Consider the problem of finding a suitable nonce value (\(n\)) such
that when appended to some challenge string (\(C\)) and hashed the
resulting hash value meets some constraint – like being lesser than a
given target value (\(T_V\)).</p>
<p>$$ H( C||n ) &lt; T_V $$</p>
<p>Since hashing is a one-way function, it is practically impossible –
infeasible is a better word; to deduce the value of \(n\) from
\(C\), therefore the only way to find a value for \(n\) is to
<a href="http://en.wikipedia.org/wiki/Brute-force_search">brute force</a> the search space, performing a large number of
computations – depending on the difficulty of satisfying the
constraint. Once a suitable value of \(n\) is found, a verifier
needs to perform the hash function <em>exactly once</em> to check that the
resulting hash matches the presented constraint.</p>
<p>Hashcash – one of the first widely implemented proof-of-work systems;
was used to combat email spam and prevent denial-of-service
attacks. Nowadays though, thanks to <a href="https://bitcoin.org/">Bitcoin</a>, proof-of-work
systems have a much larger audience.</p>
<hr>
<p>Outlining how a system for liking using proof-of-work functions,</p>
<h2 id="steps-involved">Steps Involved</h2>
<p>We have a <em>client</em> and <em>server</em>. Simply put, there are 5 basic steps,</p>
<p><strong>Client sends requests</strong>, indicating that it wishes to like. This
step is probably initiated by some form of user interaction. This
interaction should also allow the user to modify a parameter
indicating <em>how much</em> he likes the thing.</p>
<p><strong>Server generates a challenge</strong> and sends it to the client. The
<code>challenge</code> generated is probably a function of the user’s IP, a
timestamp and of course, the URL of the page he likes. The generated
<code>challenge</code> is stored in a cache and marked with an <code>expiry</code> timestamp
after which, it gets flushed – a client must submit solution before
this.</p>
<p><strong>Client begins work</strong>. It performs an exhaustive brute-force search
on the entire search space. The user probably has to stay on the page
for the duration of this search – switching causes a demotion of
priority and makes the search extremely slow.</p>
<p>Once, <strong>the client finds a suitable nonce</strong>, that satisfies the
supplied constraint, it sends the value to the server tagged with the
<code>challenge</code> that it solved.</p>
<p><strong>Server verifies the nonce</strong> and assigns a <code>reward</code> value depending
on the <code>difficulty</code> of a solution.</p>
<h2 id="issues">Issues</h2>
<h3 id="environment">Environment</h3>
<p>All of the client side code has to <strong>run in the browser</strong>. An
important here consideration is that, while the client is working, it
shouldn’t hinder the user’s interaction with the rest of the page. The
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Worker API</a> is ideally suited for this, since it
allows for a script to run without blocking the main UI thread on the
page.</p>
<h3 id="speed">Speed</h3>
<p>Running in the browser limits our ability to exploit the full CPU
potential. And accessing the GPU from the browser requires the use of
WebGL. The problem is that the WebGL context can only be accessed from
the main UI thread.</p>
<p><a href="https://github.com/kripken/emscripten">Emscripten</a> shows some impressive performance
benchmarks. Hell, they’ve even gotten
<a href="https://blog.mozilla.org/blog/2014/03/12/mozilla-and-epic-preview-unreal-engine-4-running-in-firefox/">Unreal Engine to run in the browser!</a></p>
<h3 id="content-vs-url">Content vs. URL</h3>
<p>At first, I thought that it would be better to base the challenge on
the <strong>content</strong> of the page. The advantage of this is that it provides
some kind of authentication – if the content of the page is changed
in any way, all previous likes become invalid. The problem with that
approach is that even minor edits can change the generated <code>challenge</code>
– something to avoid.</p>
<h2 id="pluses">Pluses</h2>
<h3 id="parametric-liking">Parametric liking</h3>
<p>Say I’ve got two <em>articles</em> of in front of me.</p>
<p>Now, I definitely like one but I think the other is <em>way</em> better.
Earlier, my likes in both cases were worth the same! But now, I can
actually like one more than the other.</p>
<p><strong>How?</strong>, you may ask. Well, most proof-of-work functions have an
adjustable <code>difficulty</code> parameter. The <em>higher</em> the value of this
parameter, the <em>longer</em> it takes to find a nonce value that satisfies
the solution, but it generates a higher <code>reward</code> value.</p>
<p>So, for something that I casually like, I can set a lower <code>difficulty</code>
value. But, for something that I think is <em>really great</em> I can set a
higher <code>difficulty</code> value.</p>
<h3 id="actual-resource">Actual resource</h3>
<p>This is really more of a symbolic benefit. Since liking is backed by a
solution to a proof-of-work function, it can be safely assumed that
the <em>liker</em> has expended some <em>real</em> amount of computational power in
generating the nonce.</p>
<h2 id="not-so-pluses">Not so pluses</h2>
<h3 id="mobile">Mobile</h3>
<p>This idea doesn’t really play well with mobile devices for two main
reasons.</p>
<ol>
<li><strong>CPU</strong> - It will take quite a while longer to like something.</li>
<li><strong>Power</strong> - Liking frequently significantly drains the battery.</li>
</ol>
<h3 id="undemocratic">Undemocratic</h3>
<p>In this system, not everybody is equally represented. A higher
weightage is given to people that have more compute power. People who
can afford more powerful systems end up having more <em>liking power</em>
than the others.</p>
<h3 id="page-focus">Page focus</h3>
<p>To perform the like, the <em>liker</em> must keep the page in
focus. Otherwise, the brute-force job gets demoted to a background
task and eventually it times out.</p>
<h2 id="links">Links</h2>
<p>I’ve started working on a server very <em>creatively</em> called <strong>HashLike</strong> –
written in Golang. Check out the <a href="https://github.com/vasuman/HashLike">repo</a> for more.</p>
]]></description><link>posts/2015/04/18/pow-like.html</link><guid isPermaLink="false">https://www.varav.in/posts/pow-like.md</guid><pubDate>Sat, 18 Apr 2015 07:00:00 GMT</pubDate></item><item><title><![CDATA[L-systems]]></title><description><![CDATA[<h2 id="charnia">Charnia</h2>
<p>I was watching the <a href="http://firstlifeseries.com/">First Life</a> documentary which
chronicles the origins and evolution of life. In the documentary, they make a
mention of <a href="http://en.wikipedia.org/wiki/Charnia">Charnia</a> a frond-like
primitive organism. It lived deep underwater and fed of nutrients in the water.
Sadly, it went extinct and has no extant descendants. Since it is one of the
oldest known multicellular organisms it provides great insights into the origins
of such beings.</p>
<p>This is what they supposedly looked like,</p>
<p><figure><img alt="Charnia" src="/static/images/lsystem/charnia.jpg" /><figcaption>Charnia</figcaption></figure></p>
<p>Now, you may be wondering why I’m talking about something that hasn’t been
around for over 500 million years. Well, I was struck by the beauty and
simplicity of the organization of it’s cells. These organisms adopted fractal
branching to generate their body structure.</p>
<p>Since this organism had to absorb its sustenance from the ocean, it needed a
very high surface area and compact packing. Fractal arrangements were perfect
for this. It’s truly amazing how resourceful these organisms were to use
relatively simple instructions can give rise to amazingly beautiful patterns.
They necessarily couldn’t be too elaborate in their designs.</p>
<h2 id="lindenmayer-systems">Lindenmayer systems</h2>
<p>Digging deeper into this topic is where I found
<a href="https://en.wikipedia.org/wiki/L-system">Lindenmayer Systems</a> or L-systems for
short. Developed by Astrid Lindenmayer, a Hungarian biologist in 1968, they
provide a clear and simple way to model fractal growth.</p>
<p>An L-system is basically a type of formal grammar, in other words, it defines a
language – basically a set of acceptable strings. It has three basic
components,</p>
<ol>
<li>Set of alphabets used to compose the strings</li>
<li>An axiom (<em>starting string</em>)</li>
<li>Rewrite rules</li>
</ol>
<p>The set of strings belonging to this language is generated by first starting out
with a set containing the axiom. Then we generate new strings by applying all
applicable rewrite rules to the strings in the set.</p>
<p>Rewrite rules or production rules as you may have heard of them consist of a
<em>left-hand</em> side and a <em>right-hand</em> side. Any substring matching the left side
can be substituted with the string on the right side. As with any formal
grammar, an L-system is context-free if there is only a single symbol in the
left hand side of the production.</p>
<p>L-system models are greatly suited to generate self-similar or <em>fractal</em>
patterns because the rewrite rules can be recursively expanded.</p>
<h2 id="logo">Logo</h2>
<p>I remember back in school when we were first introduced to computers and
programming, we were taught the <a href="http://el.media.mit.edu/logo-foundation/what_is_logo/logo_programming.html">Logo Programming
Language</a>.
I thought this was just one of those things you were taught in school and never
had to use later. Well, turns out I was wrong, the little turtle wasn’t dead
yet. Most L-systems use a Logo-like paradigm to implement graphics.</p>
<p>In a relatively simple model, the turtle’s state encapsulates of four
parameters,</p>
<ol>
<li><code>x</code> co-ordinate.</li>
<li><code>y</code> co-ordinate.</li>
<li>Angle of orientation</li>
<li>Color of line drawn.</li>
</ol>
<p>Stateful drawing commands help us generate graphics for every derived string.
Each symbol is associated with a Logo command and every string is interpreted as
a sequence of commands that is executed by the interpreter to generate the final
pattern.</p>
<h2 id="mechanism">Mechanism</h2>
<p>Consider, a relatively simple grammar.</p>
<p>The set of symbols is, <code>{A, B, C, R}</code></p>
<p>Production rules are,</p>
<pre><code>A : A B A C A B A</code></pre><p>Now, I must mention here that for any symbol (<code>X</code>) lacking any rewrite rule, we
assume an identity expansion, i.e.</p>
<pre><code>X : X</code></pre><p>The axiom is <code>R A</code>. The <code>R</code> symbol is just used to get the orientation correct.</p>
<p>Consider these draw rules for the symbols,</p>
<pre><code>A = FD 10
B = RT 60
C = LT 120
R = RT 90</code></pre><p>Initially, the string representing the state of the system is,</p>
<pre><code>R A</code></pre><p>Substituting the symbols’ logo equivalents we get the sequence,</p>
<pre><code>RT 90
FD 10</code></pre><p>The graphical representation of the system looks like,</p>
<p><figure><img alt="Initial state" src="/static/images/lsystem/lsys-init.jpg" /><figcaption>Initial state</figcaption></figure></p>
<p>On iterating once, we apply the production to expand all the symbols we can. Our
string becomes,</p>
<pre><code>R A B A C A B A</code></pre><p>Logo sequence equivalent,</p>
<pre><code>RT 90
FD 10
RT 60
FD 10
LT 120
FD 10
RT 60
FD 10</code></pre><p>Evaluating these commands in an interpreter, we get the graphical
representation,</p>
<p><figure><img alt="First iteration" src="/static/images/lsystem/lsys-1.jpg" /><figcaption>First iteration</figcaption></figure></p>
<p>Iterating again, we continue to expand and our string becomes,</p>
<pre><code>R A B A C B A B A B A C B A C A B A C B A B A B A C B A</code></pre><p>OK, that’s big. As you may have probably guessed, the string size grows
exponentially.</p>
<p>It looks like,</p>
<p><figure><img alt="Second iteration" src="/static/images/lsystem/lsys-2.jpg" /><figcaption>Second iteration</figcaption></figure></p>
<p>If you look at what this system is actually doing in simple terms, it’s simply
replacing every straight line in the figure with a small triangular bump. This
substitution is recursively applied to any lines in the resulting figure to give
rise to self-similarity.</p>
<p>Another iteration and we get something looking like this,</p>
<p><figure><img alt="Third iteration" src="/static/images/lsystem/lsys-3.jpg" /><figcaption>Third iteration</figcaption></figure></p>
<p>Pretty cool, right!</p>
<p>Check out the <a href="/demos/lsystem.html">demo</a> that I wrote up. It has got a few cool
presets. The <a href="https://github.com/vasuman/lsystem">source code</a> also is
available.</p>
<h2 id="patterns">Patterns</h2>
<p>Here’s a few cool patterns that I’ve generated.</p>
<p><figure><img alt="Fern Knife" src="/static/images/lsystem/fern-knife.png" /><figcaption>Fern Knife</figcaption></figure></p>
<p><figure><img alt="Crosses" src="/static/images/lsystem/crosses.png" /><figcaption>Crosses</figcaption></figure></p>
<p><figure><img alt="Stars" src="/static/images/lsystem/stars.jpg" /><figcaption>Stars</figcaption></figure></p>
<p>Try making your own.</p>
]]></description><link>posts/2014/12/11/lsystem.html</link><guid isPermaLink="false">https://www.varav.in/posts/lsystem.md</guid><pubDate>Thu, 11 Dec 2014 08:00:00 GMT</pubDate></item><item><title><![CDATA[Fun with Pipes]]></title><description><![CDATA[<p>Quite a while back I came across some interesting applications of
<strong>named pipes</strong> that I thought I should share with everybody.</p>
<p>First, some background.</p>
<h2 id="pipes">Pipes</h2>
<p>Commonly, pipes are used in the shell to redirect the <code>stdout</code> of one
process to the <code>stdin</code> of another, you simply</p>
<pre><code class="language-sh">$ cat myfile | grep sometext</code></pre>
<h2 id="named-pipes">Named pipes</h2>
<p>Since <code>|</code> pipes are anonymous, they cannot be referenced externally.
Named pipes on the other hand have an accesible path in the
filesystem.</p>
<pre><code class="language-sh">$ mkfifo /tmp/mypipe</code></pre>
<p>These pipes allow us to setup flows across different shell commands.
Data can be pumped in by one command and fed to another command. Like,</p>
<pre><code class="language-sh">$ cat /tmp/mypipe</code></pre>
<p>This command blocks till the named pipe spews and <code>EOF</code> marker.</p>
<p>And in another shell,</p>
<pre><code class="language-sh">$ cat &gt; /tmp/mypipe</code></pre>
<p>Now, whatever you type in the this shell should be visible in the
other shell. Press <kbd>Ctrl-D</kbd> to exit.</p>
<p>Named pipes are primarily used as IPC mechanisms along with UNIX
sockets.</p>
<p>Now let’s get down to some interesting stuff. These pipes are
of interest to me because they allow us to set up a very special kind
of circular reference. That is, <em>they allow a command’s own output to
be part of it’s input!</em>.</p>
<h2 id="echo-server">Echo Server</h2>
<p>Let’s start of with something simple, an <strong>echo server</strong>. The
principle is to simply <em>echo</em> the input of the user. As have probably
noticed, this falls directly into the category of problems the
circular reference property of named pipes solves – the input is the
output.</p>
<p>The <a href="http://sectools.org/tool/netcat/">netcat</a> utility helps us setup
a simple listening socket that can be communicated with using <code>stdin</code>
and <code>stdout</code>.</p>
<pre><code class="language-sh">$ cat /tmp/mypipe | nc -l 59000 &gt; /tmp/mypipe</code></pre>
<p>Simply <code>cat</code>ing the contents of a pipe to the input of the <code>nc</code>
command with the <code>-l</code> option that sets up a port to listen on and
write any incoming data to the same pipe so that it’s echoed
back. Then,</p>
<pre><code class="language-sh">$ nc &lt;network-address&gt; 59000</code></pre>
<p>There you have it, an <em>echo server in one line of bash</em></p>
<h2 id="remote-shell">Remote Shell</h2>
<p>Suppose, you have discovered a vulnerability in some service that
allows you to execute a single command on the shell. Now you want to
drop a shell on that box. For something serious, you’re probably
better of using
<a href="http://www.offensive-security.com/metasploit-unleashed/Meterpreter_Basics">Meterpreter</a>
but this is for cases where you just need a simple, quick and dirty
hack!</p>
<p>Like the earlier snippet we set up a circular input path. The only
difference being we pipe the user input through the bash interpreter
that executes <code>stdin</code> and pipe it’s <code>stdout</code> back to the network socket.</p>
<pre><code class="language-sh">$ cat /tmp/mypipe | bash | nc -l 59000 &gt; /tmp/mypipe</code></pre>
<p>Just connect to that port and you should have a working remote shell.</p>
<h2 id="chat-server">Chat Server</h2>
<p>A chat server is another application that falls into the same problem
domain. It recieves some input and simply relays that input to all
connected users. It can be thought of as an echo server with multiple
concurrent nodes.</p>
<p>Sadly though, the netcat utility only allows only a single active
connection. Luckily, there’s <a href="http://nmap.org/ncat/">this</a> rewrite of
the netcat tool that allows us to accept multiple incoming connections
simultaneously.</p>
<pre><code class="language-sh">$ cat /tmp/mypipe | ncat -l -k 59000 &gt; /tmp/mypipe</code></pre>
<p>Now multiple hosts can connect to that port and exchange messages with
each other.</p>
]]></description><link>posts/2014/10/06/named-pipes.html</link><guid isPermaLink="false">https://www.varav.in/posts/named-pipes.md</guid><pubDate>Mon, 06 Oct 2014 07:00:00 GMT</pubDate></item></channel></rss>